{
  "{\"sourceRoot\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\\\\tests\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\",\"filename\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\\\\tests\\\\1_unit-tests.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\tests\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver",
      "filename": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\tests\\1_unit-tests.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\tests\\1_unit-tests.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\tests\\1_unit-tests.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\tests\\",
        "sourceFileName": "1_unit-tests.js"
      }
    },
    "ast": null,
    "code": "const chai = require('chai');\n\nconst assert = chai.assert;\n\nconst Solver = require('../controllers/sudoku-solver.js');\n\nlet solver = new Solver();\nsuite('UnitTests', () => {\n  test('valid puzzle string of 81 chars', done => {\n    let complete = '769235418851496372432178956174569283395842761628713549283657194516924837947381625';\n    assert.equal(solver.solve('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'), complete);\n    assert.isTrue(solver.validate('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'));\n    done();\n  });\n  test('puzzle string with invalid chars', done => {\n    assert.equal(solver.solve('..9..5.1.85.4....2432......1...69.83g9.....6.62.71...9......1945....4.37.4.3..6..'), false);\n    assert.isFalse(solver.validate('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6.a'));\n    done();\n  });\n  test('puzzle string that is not 81 char in length', done => {\n    assert.equal(solver.solve('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6....'), false);\n    assert.isFalse(solver.validate('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6....'));\n    done();\n  });\n  test('valid row placement', done => {\n    assert.isTrue(solver.checkRowPlacement('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..', 'A', '1', 2));\n    done();\n  });\n  test('invalid row placement', done => {\n    assert.isFalse(solver.checkRowPlacement('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..', 'A', '1', 9));\n    done();\n  });\n  test('valid column placement', done => {\n    assert.isTrue(solver.checkColPlacement('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..', 'A', '1', 2));\n    done();\n  });\n  test('invalid column placement', done => {\n    assert.isFalse(solver.checkColPlacement('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..', 'A', '1', 1));\n    done();\n  });\n  test('valid region placement', done => {\n    assert.isTrue(solver.checkRegionPlacement('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..', 'A', '1', 1));\n    done();\n  });\n  test('invalid region placement', done => {\n    assert.isFalse(solver.checkRegionPlacement('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..', 'A', '1', 2));\n    done();\n  });\n  test('valid puzzle strings pass the solver', done => {\n    assert.equal(solver.solve('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'), '769235418851496372432178956174569283395842761628713549283657194516924837947381625');\n    done();\n  });\n  test('invalid puzzle strings fail the solver', done => {\n    assert.isFalse(solver.solve('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6......'));\n    done();\n  });\n  test('solver returns the expected solution for an incomplete puzzle', done => {\n    assert.equal(solver.solve('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'), '769235418851496372432178956174569283395842761628713549283657194516924837947381625');\n    done();\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "1_unit-tests.js"
      ],
      "names": [
        "chai",
        "require",
        "assert",
        "Solver",
        "solver",
        "suite",
        "test",
        "done",
        "complete",
        "equal",
        "solve",
        "isTrue",
        "validate",
        "isFalse",
        "checkRowPlacement",
        "checkColPlacement",
        "checkRegionPlacement"
      ],
      "mappings": "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",
      "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\tests\\",
      "sourcesContent": [
        "const chai = require('chai');\nconst assert = chai.assert;\n\nconst Solver = require('../controllers/sudoku-solver.js');\nlet solver = new Solver();\n\nsuite('UnitTests', () => {\n\n    test('valid puzzle string of 81 chars', (done) => {\n        let complete = '769235418851496372432178956174569283395842761628713549283657194516924837947381625' \n\n        assert.equal(solver.solve('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'), complete)\n        assert.isTrue(solver.validate('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'))\n        done()\n    })\n\n    test('puzzle string with invalid chars', (done) => {\n        assert.equal(solver.solve('..9..5.1.85.4....2432......1...69.83g9.....6.62.71...9......1945....4.37.4.3..6..'), false)\n        assert.isFalse(solver.validate('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6.a'))\n        done()\n    })\n\n    test('puzzle string that is not 81 char in length', (done) => {\n        assert.equal(solver.solve('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6....'), false)\n        assert.isFalse(solver.validate('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6....'))\n        done()\n    })    \n\n    test('valid row placement', (done) => {\n        assert.isTrue(solver.checkRowPlacement('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..','A', '1', 2))\n        done()\n    })    \n\n    test('invalid row placement', (done) => {\n        assert.isFalse(solver.checkRowPlacement('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..','A', '1', 9))\n        done()\n    })    \n\n    test('valid column placement', (done) => {\n        assert.isTrue(solver.checkColPlacement('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..','A', '1', 2))\n        done()\n    })    \n\n    test('invalid column placement', (done) => {\n        assert.isFalse(solver.checkColPlacement('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..','A', '1', 1))\n        done()\n    })    \n\n    test('valid region placement', (done) => {\n        assert.isTrue(solver.checkRegionPlacement('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..','A', '1', 1))\n        done()\n    })    \n\n    test('invalid region placement', (done) => {\n        assert.isFalse(solver.checkRegionPlacement('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..','A', '1', 2))\n        done()\n    }) \n\n    test('valid puzzle strings pass the solver', (done) => {\n        assert.equal(solver.solve('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'), '769235418851496372432178956174569283395842761628713549283657194516924837947381625')\n        done()\n    })\n\n    test('invalid puzzle strings fail the solver', (done) => {\n        assert.isFalse(solver.solve('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6......'))\n        done()\n    })\n\n    test('solver returns the expected solution for an incomplete puzzle', (done) => {\n        assert.equal(solver.solve('..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'), '769235418851496372432178956174569283395842761628713549283657194516924837947381625')\n        done()\n    })\n});\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1761066612474
  },
  "{\"sourceRoot\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\\\\controllers\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\",\"filename\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\\\\controllers\\\\sudoku-solver.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\controllers\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver",
      "filename": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\controllers\\sudoku-solver.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\controllers\\sudoku-solver.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\controllers\\sudoku-solver.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\controllers\\",
        "sourceFileName": "sudoku-solver.js"
      }
    },
    "ast": null,
    "code": "let N = 9;\n\nclass SudokuSolver {\n  validate(puzzleString) {\n    const regex = /^[1-9.]+$/;\n    if (!puzzleString) return false;else if (!regex.test(puzzleString)) return false;else if (puzzleString.length !== 81) return false;else return true;\n  }\n\n  letterToNumber(row) {\n    switch (row.toUpperCase()) {\n      case 'A':\n        return 1;\n\n      case 'B':\n        return 2;\n\n      case 'C':\n        return 3;\n\n      case 'D':\n        return 4;\n\n      case 'E':\n        return 5;\n\n      case 'F':\n        return 6;\n\n      case 'G':\n        return 7;\n\n      case 'H':\n        return 8;\n\n      case 'I':\n        return 9;\n    }\n  }\n\n  checkRowPlacement(puzzleString, row, column, value) {\n    let grid = this.transform(puzzleString);\n    row = this.letterToNumber(row);\n    column = parseInt(column); //if there is a number other than 0 or value present at the current coordinate\n\n    if (grid[row - 1][column - 1] !== 0 && grid[row - 1][column - 1] != value) return false; //if value exists in the given row skipping the coordinate provided\n\n    for (let i = 0; i < 9; i++) {\n      if (i == column - 1) continue;\n      if (grid[row - 1][i] == value) return false;\n    }\n\n    return true;\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let grid = this.transform(puzzleString);\n    row = this.letterToNumber(row);\n    column = parseInt(column);\n    if (grid[row - 1][column - 1] !== 0 && grid[row - 1][column - 1] != value) return false;\n\n    for (let i = 0; i < 9; i++) {\n      if (i == row - 1) continue;\n      if (grid[i][column - 1] == value) return false;\n    }\n\n    return true;\n  }\n\n  checkRegionPlacement(puzzleString, row, column, value) {\n    let grid = this.transform(puzzleString);\n    row = this.letterToNumber(row);\n    column = parseInt(column);\n    if (grid[row - 1][column - 1] !== 0 && grid[row - 1][column - 1] != value) return false;\n    let startRow = row - row % 3;\n    let startCol = column - column % 3;\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (grid[i + startRow][j + startCol] == value) return false;\n      }\n    }\n\n    return true;\n  }\n\n  isSafe(grid, row, col, num) {\n    for (let x = 0; x <= 8; x++) if (grid[row][x] == num) return false;\n\n    for (let x = 0; x <= 8; x++) if (grid[x][col] == num) return false;\n\n    let startRow = row - row % 3,\n        startCol = col - col % 3;\n\n    for (let i = 0; i < 3; i++) for (let j = 0; j < 3; j++) if (grid[i + startRow][j + startCol] == num) return false;\n\n    return true;\n  }\n\n  solveSuduko(grid, row, col) {\n    if (row == N - 1 && col == N) return grid;\n\n    if (col == N) {\n      row++;\n      col = 0;\n    }\n\n    if (grid[row][col] != 0) return this.solveSuduko(grid, row, col + 1);\n\n    for (let num = 1; num < 10; num++) {\n      if (this.isSafe(grid, row, col, num)) {\n        grid[row][col] = num;\n        if (this.solveSuduko(grid, row, col + 1)) return grid;\n      }\n\n      grid[row][col] = 0;\n    }\n\n    return false;\n  }\n\n  transform(puzzleString) {\n    let i = 0,\n        k = 0;\n    let grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]];\n    if (puzzleString.length !== 81) return false; //new\n\n    let arr = puzzleString.split('');\n    arr.forEach(elem => {\n      if (/[a-z]/i.test(elem)) return false; //new\n\n      if (elem === '.') arr[i] = 0;else arr[i] = parseInt(elem);\n      i++;\n    });\n\n    for (let i = 0; i < grid.length; i++) {\n      for (let j = 0; j < grid[i].length; j++) {\n        if (arr[k] !== 0) grid[i][j] = arr[k];\n        k++;\n      }\n    }\n\n    return grid;\n  }\n\n  transformBack(grid) {\n    return grid.flat().join('');\n  }\n\n  solve(puzzleString) {\n    let grid = this.transform(puzzleString);\n    if (!grid) return false; //new\n\n    let solved = this.solveSuduko(grid, 0, 0);\n    if (!solved) return false; //new\n\n    let solvedString = this.transformBack(solved);\n    return solvedString;\n  }\n\n}\n\nmodule.exports = SudokuSolver;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "sudoku-solver.js"
      ],
      "names": [
        "N",
        "SudokuSolver",
        "validate",
        "puzzleString",
        "regex",
        "test",
        "length",
        "letterToNumber",
        "row",
        "toUpperCase",
        "checkRowPlacement",
        "column",
        "value",
        "grid",
        "transform",
        "parseInt",
        "i",
        "checkColPlacement",
        "checkRegionPlacement",
        "startRow",
        "startCol",
        "j",
        "isSafe",
        "col",
        "num",
        "x",
        "solveSuduko",
        "k",
        "arr",
        "split",
        "forEach",
        "elem",
        "transformBack",
        "flat",
        "join",
        "solve",
        "solved",
        "solvedString",
        "module",
        "exports"
      ],
      "mappings": "AAAA,IAAIA,CAAC,GAAG,CAAR;;AAEA,MAAMC,YAAN,CAAmB;AAEjBC,EAAAA,QAAQ,CAACC,YAAD,EAAe;AACrB,UAAMC,KAAK,GAAG,WAAd;AAEA,QAAG,CAACD,YAAJ,EAAkB,OAAO,KAAP,CAAlB,KACK,IAAG,CAACC,KAAK,CAACC,IAAN,CAAWF,YAAX,CAAJ,EAA8B,OAAO,KAAP,CAA9B,KACA,IAAGA,YAAY,CAACG,MAAb,KAAwB,EAA3B,EAA+B,OAAO,KAAP,CAA/B,KACA,OAAO,IAAP;AACN;;AAEDC,EAAAA,cAAc,CAACC,GAAD,EAAK;AACjB,YAAQA,GAAG,CAACC,WAAJ,EAAR;AACE,WAAK,GAAL;AACE,eAAO,CAAP;;AACF,WAAK,GAAL;AACE,eAAO,CAAP;;AACF,WAAK,GAAL;AACE,eAAO,CAAP;;AACF,WAAK,GAAL;AACE,eAAO,CAAP;;AACF,WAAK,GAAL;AACE,eAAO,CAAP;;AACF,WAAK,GAAL;AACE,eAAO,CAAP;;AACF,WAAK,GAAL;AACE,eAAO,CAAP;;AACF,WAAK,GAAL;AACE,eAAO,CAAP;;AACF,WAAK,GAAL;AACE,eAAO,CAAP;AAlBJ;AAoBD;;AAEDC,EAAAA,iBAAiB,CAACP,YAAD,EAAeK,GAAf,EAAoBG,MAApB,EAA4BC,KAA5B,EAAmC;AAClD,QAAIC,IAAI,GAAG,KAAKC,SAAL,CAAeX,YAAf,CAAX;AACAK,IAAAA,GAAG,GAAG,KAAKD,cAAL,CAAoBC,GAApB,CAAN;AACAG,IAAAA,MAAM,GAAGI,QAAQ,CAACJ,MAAD,CAAjB,CAHkD,CAIlD;;AACA,QAAGE,IAAI,CAACL,GAAG,GAAC,CAAL,CAAJ,CAAYG,MAAM,GAAC,CAAnB,MAA0B,CAA1B,IAA+BE,IAAI,CAACL,GAAG,GAAC,CAAL,CAAJ,CAAYG,MAAM,GAAC,CAAnB,KAAyBC,KAA3D,EAAkE,OAAO,KAAP,CALhB,CAOlD;;AACA,SAAI,IAAII,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA2B;AACzB,UAAGA,CAAC,IAAIL,MAAM,GAAC,CAAf,EAAkB;AAClB,UAAGE,IAAI,CAACL,GAAG,GAAC,CAAL,CAAJ,CAAYQ,CAAZ,KAAkBJ,KAArB,EACE,OAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACD;;AAEDK,EAAAA,iBAAiB,CAACd,YAAD,EAAeK,GAAf,EAAoBG,MAApB,EAA4BC,KAA5B,EAAmC;AAClD,QAAIC,IAAI,GAAG,KAAKC,SAAL,CAAeX,YAAf,CAAX;AACAK,IAAAA,GAAG,GAAG,KAAKD,cAAL,CAAoBC,GAApB,CAAN;AACAG,IAAAA,MAAM,GAAGI,QAAQ,CAACJ,MAAD,CAAjB;AAEA,QAAGE,IAAI,CAACL,GAAG,GAAG,CAAP,CAAJ,CAAcG,MAAM,GAAG,CAAvB,MAA8B,CAA9B,IAAmCE,IAAI,CAACL,GAAG,GAAC,CAAL,CAAJ,CAAYG,MAAM,GAAC,CAAnB,KAAyBC,KAA/D,EACE,OAAO,KAAP;;AAEF,SAAI,IAAII,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACxB,UAAGA,CAAC,IAAIR,GAAG,GAAC,CAAZ,EAAe;AACf,UAAGK,IAAI,CAACG,CAAD,CAAJ,CAAQL,MAAM,GAAG,CAAjB,KAAuBC,KAA1B,EACE,OAAO,KAAP;AACH;;AACD,WAAO,IAAP;AACD;;AAEDM,EAAAA,oBAAoB,CAACf,YAAD,EAAeK,GAAf,EAAoBG,MAApB,EAA4BC,KAA5B,EAAmC;AACrD,QAAIC,IAAI,GAAG,KAAKC,SAAL,CAAeX,YAAf,CAAX;AACAK,IAAAA,GAAG,GAAG,KAAKD,cAAL,CAAoBC,GAApB,CAAN;AACAG,IAAAA,MAAM,GAAGI,QAAQ,CAACJ,MAAD,CAAjB;AAEA,QAAGE,IAAI,CAACL,GAAG,GAAG,CAAP,CAAJ,CAAcG,MAAM,GAAG,CAAvB,MAA8B,CAA9B,IAAmCE,IAAI,CAACL,GAAG,GAAC,CAAL,CAAJ,CAAYG,MAAM,GAAC,CAAnB,KAAyBC,KAA/D,EACE,OAAO,KAAP;AAEF,QAAIO,QAAQ,GAAGX,GAAG,GAAIA,GAAG,GAAI,CAA7B;AACA,QAAIY,QAAQ,GAAGT,MAAM,GAAIA,MAAM,GAAG,CAAlC;;AAEA,SAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACxB,WAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA2B;AACzB,YAAGR,IAAI,CAACG,CAAC,GAAGG,QAAL,CAAJ,CAAmBE,CAAC,GAAGD,QAAvB,KAAoCR,KAAvC,EACE,OAAO,KAAP;AACD;AACF;;AACH,WAAO,IAAP;AACD;;AAEDU,EAAAA,MAAM,CAACT,IAAD,EAAOL,GAAP,EAAYe,GAAZ,EAAiBC,GAAjB,EACN;AACI,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,CAApB,EAAuBA,CAAC,EAAxB,EACI,IAAIZ,IAAI,CAACL,GAAD,CAAJ,CAAUiB,CAAV,KAAgBD,GAApB,EACI,OAAO,KAAP;;AAER,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,CAApB,EAAuBA,CAAC,EAAxB,EACI,IAAIZ,IAAI,CAACY,CAAD,CAAJ,CAAQF,GAAR,KAAgBC,GAApB,EACI,OAAO,KAAP;;AAER,QAAIL,QAAQ,GAAGX,GAAG,GAAGA,GAAG,GAAG,CAA3B;AAAA,QACIY,QAAQ,GAAGG,GAAG,GAAGA,GAAG,GAAG,CAD3B;;AAGA,SAAI,IAAIP,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EACI,KAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EACI,IAAIR,IAAI,CAACG,CAAC,GAAGG,QAAL,CAAJ,CAAmBE,CAAC,GAAGD,QAAvB,KAAoCI,GAAxC,EACI,OAAO,KAAP;;AAEZ,WAAO,IAAP;AACH;;AAEDE,EAAAA,WAAW,CAACb,IAAD,EAAOL,GAAP,EAAYe,GAAZ,EACX;AACE,QAAIf,GAAG,IAAIR,CAAC,GAAG,CAAX,IAAgBuB,GAAG,IAAIvB,CAA3B,EACI,OAAOa,IAAP;;AAEJ,QAAIU,GAAG,IAAIvB,CAAX,EAAa;AACTQ,MAAAA,GAAG;AACHe,MAAAA,GAAG,GAAG,CAAN;AACH;;AAED,QAAIV,IAAI,CAACL,GAAD,CAAJ,CAAUe,GAAV,KAAkB,CAAtB,EACI,OAAO,KAAKG,WAAL,CAAiBb,IAAjB,EAAuBL,GAAvB,EAA4Be,GAAG,GAAG,CAAlC,CAAP;;AAEJ,SAAI,IAAIC,GAAG,GAAG,CAAd,EAAiBA,GAAG,GAAG,EAAvB,EAA2BA,GAAG,EAA9B,EACA;AACI,UAAI,KAAKF,MAAL,CAAYT,IAAZ,EAAkBL,GAAlB,EAAuBe,GAAvB,EAA4BC,GAA5B,CAAJ,EACA;AACIX,QAAAA,IAAI,CAACL,GAAD,CAAJ,CAAUe,GAAV,IAAiBC,GAAjB;AACA,YAAI,KAAKE,WAAL,CAAiBb,IAAjB,EAAuBL,GAAvB,EAA4Be,GAAG,GAAG,CAAlC,CAAJ,EACI,OAAOV,IAAP;AACP;;AACDA,MAAAA,IAAI,CAACL,GAAD,CAAJ,CAAUe,GAAV,IAAiB,CAAjB;AACH;;AACD,WAAO,KAAP;AACD;;AAEDT,EAAAA,SAAS,CAACX,YAAD,EAAe;AACtB,QAAIa,CAAC,GAAE,CAAP;AAAA,QAAUW,CAAC,GAAG,CAAd;AACA,QAAId,IAAI,GAAG,CACT,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,CADS,EAET,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,CAFS,EAGT,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,CAHS,EAIT,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,CAJS,EAKT,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,CALS,EAMT,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,CANS,EAOT,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,CAPS,EAQT,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,CARS,EAST,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,CATS,CAAX;AAYA,QAAGV,YAAY,CAACG,MAAb,KAAwB,EAA3B,EAA+B,OAAO,KAAP,CAdT,CAcsB;;AAE5C,QAAIsB,GAAG,GAAGzB,YAAY,CAAC0B,KAAb,CAAmB,EAAnB,CAAV;AACAD,IAAAA,GAAG,CAACE,OAAJ,CAAYC,IAAI,IAAI;AAClB,UAAG,SAAS1B,IAAT,CAAc0B,IAAd,CAAH,EAAwB,OAAO,KAAP,CADN,CACmB;;AACrC,UAAIA,IAAI,KAAK,GAAb,EAAkBH,GAAG,CAACZ,CAAD,CAAH,GAAS,CAAT,CAAlB,KACKY,GAAG,CAACZ,CAAD,CAAH,GAASD,QAAQ,CAACgB,IAAD,CAAjB;AACLf,MAAAA,CAAC;AACF,KALD;;AAOA,SAAI,IAAIA,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,IAAI,CAACP,MAAxB,EAAgCU,CAAC,EAAjC,EAAoC;AAChC,WAAI,IAAIK,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGR,IAAI,CAACG,CAAD,CAAJ,CAAQV,MAA3B,EAAmCe,CAAC,EAApC,EAAwC;AACpC,YAAGO,GAAG,CAACD,CAAD,CAAH,KAAW,CAAd,EAAiBd,IAAI,CAACG,CAAD,CAAJ,CAAQK,CAAR,IAAaO,GAAG,CAACD,CAAD,CAAhB;AACjBA,QAAAA,CAAC;AACJ;AACJ;;AACD,WAAOd,IAAP;AACD;;AAEDmB,EAAAA,aAAa,CAACnB,IAAD,EAAO;AAClB,WAAOA,IAAI,CAACoB,IAAL,GAAYC,IAAZ,CAAiB,EAAjB,CAAP;AACD;;AAEDC,EAAAA,KAAK,CAAChC,YAAD,EAAe;AAClB,QAAIU,IAAI,GAAG,KAAKC,SAAL,CAAeX,YAAf,CAAX;AACA,QAAG,CAACU,IAAJ,EAAU,OAAO,KAAP,CAFQ,CAEK;;AAEvB,QAAIuB,MAAM,GAAG,KAAKV,WAAL,CAAiBb,IAAjB,EAAuB,CAAvB,EAA0B,CAA1B,CAAb;AACA,QAAG,CAACuB,MAAJ,EAAY,OAAO,KAAP,CALM,CAKO;;AAEzB,QAAIC,YAAY,GAAG,KAAKL,aAAL,CAAmBI,MAAnB,CAAnB;AACA,WAAOC,YAAP;AACD;;AAnLgB;;AAsLnBC,MAAM,CAACC,OAAP,GAAiBtC,YAAjB",
      "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\controllers\\",
      "sourcesContent": [
        "let N = 9;\n\nclass SudokuSolver {\n\n  validate(puzzleString) {\n    const regex = /^[1-9.]+$/ \n\n    if(!puzzleString) return false\n    else if(!regex.test(puzzleString)) return false\n    else if(puzzleString.length !== 81) return false\n    else return true\n  }\n\n  letterToNumber(row){\n    switch (row.toUpperCase()){\n      case 'A':\n        return 1\n      case 'B':\n        return 2\n      case 'C':\n        return 3\n      case 'D':\n        return 4\n      case 'E':\n        return 5\n      case 'F':\n        return 6\n      case 'G':\n        return 7\n      case 'H':\n        return 8\n      case 'I':\n        return 9\n    }\n  }\n\n  checkRowPlacement(puzzleString, row, column, value) {\n    let grid = this.transform(puzzleString)\n    row = this.letterToNumber(row)\n    column = parseInt(column)\n    //if there is a number other than 0 or value present at the current coordinate\n    if(grid[row-1][column-1] !== 0 && grid[row-1][column-1] != value) return false\n\n    //if value exists in the given row skipping the coordinate provided\n    for(let i = 0; i < 9; i++) {\n      if(i == column-1) continue\n      if(grid[row-1][i] == value)\n        return false\n    }\n    return true\n  }\n\n  checkColPlacement(puzzleString, row, column, value) {\n    let grid = this.transform(puzzleString)\n    row = this.letterToNumber(row)\n    column = parseInt(column)\n  \n    if(grid[row - 1][column - 1] !== 0 && grid[row-1][column-1] != value)\n      return false\n    \n    for(let i = 0; i < 9; i++){\n      if(i == row-1) continue\n      if(grid[i][column - 1] == value)\n        return false\n    }  \n    return true\n  }\n\n  checkRegionPlacement(puzzleString, row, column, value) {\n    let grid = this.transform(puzzleString)\n    row = this.letterToNumber(row)\n    column = parseInt(column)\n  \n    if(grid[row - 1][column - 1] !== 0 && grid[row-1][column-1] != value)\n      return false\n\n    let startRow = row - (row  % 3)\n    let startCol = column - (column % 3)\n\n    for(let i = 0; i < 3; i++){\n      for(let j = 0; j < 3; j++) {\n        if(grid[i + startRow][j + startCol] == value)\n          return false\n        }\n      }\n    return true \n  }\n\n  isSafe(grid, row, col, num)\n  {\n      for(let x = 0; x <= 8; x++)\n          if (grid[row][x] == num)\n              return false;\n\n      for(let x = 0; x <= 8; x++)\n          if (grid[x][col] == num)\n              return false;\n  \n      let startRow = row - row % 3,\n          startCol = col - col % 3;\n          \n      for(let i = 0; i < 3; i++)\n          for(let j = 0; j < 3; j++)\n              if (grid[i + startRow][j + startCol] == num)\n                  return false;\n  \n      return true;\n  }\n\n  solveSuduko(grid, row, col)\n  {\n    if (row == N - 1 && col == N)\n        return grid;\n\n    if (col == N){\n        row++;\n        col = 0;\n    }\n \n    if (grid[row][col] != 0)\n        return this.solveSuduko(grid, row, col + 1);\n \n    for(let num = 1; num < 10; num++)\n    {\n        if (this.isSafe(grid, row, col, num))\n        {\n            grid[row][col] = num;\n            if (this.solveSuduko(grid, row, col + 1))\n                return grid;\n        }\n        grid[row][col] = 0;\n    }\n    return false;\n  }\n\n  transform(puzzleString) {\n    let i= 0, k = 0;\n    let grid = [\n      [0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0],\n      [0,0,0,0,0,0,0,0,0]\n    ]\n\n    if(puzzleString.length !== 81) return false //new\n\n    let arr = puzzleString.split('')\n    arr.forEach(elem => {\n      if(/[a-z]/i.test(elem)) return false //new\n      if (elem === '.') arr[i] = 0\n      else arr[i] = parseInt(elem)\n      i++\n    })\n    \n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++) {\n            if(arr[k] !== 0) grid[i][j] = arr[k] \n            k++\n        }\n    }\n    return grid\n  }\n\n  transformBack(grid) {\n    return grid.flat().join('')\n  }\n\n  solve(puzzleString) {\n    let grid = this.transform(puzzleString)\n    if(!grid) return false //new\n\n    let solved = this.solveSuduko(grid, 0, 0)\n    if(!solved) return false //new\n    \n    let solvedString = this.transformBack(solved)\n    return solvedString\n  }\n}\n\nmodule.exports = SudokuSolver;\n\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1761066612441
  },
  "{\"sourceRoot\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\\\\tests\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\",\"filename\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\\\\tests\\\\2_functional-tests.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\tests\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver",
      "filename": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\tests\\2_functional-tests.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\tests\\2_functional-tests.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\tests\\2_functional-tests.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\tests\\",
        "sourceFileName": "2_functional-tests.js"
      }
    },
    "ast": null,
    "code": "const chai = require(\"chai\");\n\nconst chaiHttp = require('chai-http');\n\nconst assert = chai.assert;\n\nconst server = require('../server');\n\nchai.use(chaiHttp);\nsuite('Functional Tests', () => {\n  suite('Test POST to POST on api/solve/', () => {\n    test('test POST with valid puzzle string', done => {\n      chai.request(server).post('/api/solve').send({\n        puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'\n      }).end((err, res) => {\n        assert.isObject(res.body);\n        assert.property(res.body, 'solution');\n        assert.equal(res.body.solution, '769235418851496372432178956174569283395842761628713549283657194516924837947381625');\n        done();\n      });\n    });\n    test('test POST with missing puzzle string', done => {\n      chai.request(server).post('/api/solve').send({}).end((err, res) => {\n        assert.isObject(res.body);\n        assert.property(res.body, 'error');\n        assert.equal(res.body.error, 'Required field missing');\n        done();\n      });\n    });\n    test('test POST with invlaid characters', done => {\n      chai.request(server).post('/api/solve').send({\n        puzzle: '..9..5.1.85.4....2432......1...69.83.g.....6.62.71...9......1945....4.37.4.3..6.a'\n      }).end((err, res) => {\n        assert.isObject(res.body);\n        assert.property(res.body, 'error');\n        assert.equal(res.body.error, 'Invalid characters in puzzle');\n        done();\n      });\n    });\n    test('test POST with incorrect length', done => {\n      chai.request(server).post('/api/solve').send({\n        puzzle: '..9..5.1.85.4....2432......1...69.83.......6.62.71...9......1945....4.37.4.3..6....'\n      }).end((err, res) => {\n        assert.isObject(res.body);\n        assert.property(res.body, 'error');\n        assert.equal(res.body.error, 'Expected puzzle to be 81 characters long');\n        done();\n      });\n    });\n    test('test POST to solve puzzle that cannot be solved', done => {\n      chai.request(server).post('/api/solve').send({\n        puzzle: '..9..5.1.85.4....2432......1...69.83999999.6.62.71...9......1945....4.37.4.3..6..'\n      }).end((err, res) => {\n        assert.isObject(res.body);\n        assert.property(res.body, 'error');\n        assert.equal(res.body.error, 'Puzzle cannot be solved');\n        done();\n      });\n    });\n  });\n  suite('Test POST to POST on api/check/', () => {\n    test('check a puzzle placement with all fields', done => {\n      chai.request(server).post('/api/check').send({\n        value: '7',\n        coordinate: 'A1',\n        puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'\n      }).end((err, res) => {\n        assert.isObject(res.body);\n        assert.property(res.body, 'valid');\n        assert.equal(res.body.valid, true);\n        done();\n      });\n    });\n    test('check a puzzle placement with single placement conflict', done => {\n      chai.request(server).post('/api/check').send({\n        value: '1',\n        coordinate: 'A4',\n        puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'\n      }).end((err, res) => {\n        let arr = {\n          \"valid\": false,\n          \"conflict\": [\"row\"]\n        };\n        assert.isObject(res.body);\n        assert.property(res.body, 'valid');\n        assert.property(res.body, 'conflict');\n        assert.deepEqual(res.body, arr);\n        done();\n      });\n    });\n    test('check a puzzle placement with multiple placement conflict', done => {\n      chai.request(server).post('/api/check').send({\n        value: '9',\n        coordinate: 'A1',\n        puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'\n      }).end((err, res) => {\n        let arr = {\n          \"valid\": false,\n          \"conflict\": [\"row\", \"region\"]\n        };\n        assert.isObject(res.body);\n        assert.property(res.body, 'valid');\n        assert.property(res.body, 'conflict');\n        assert.deepEqual(res.body, arr);\n        done();\n      });\n    });\n    test('check a puzzle placement with all placement conflict', done => {\n      chai.request(server).post('/api/check').send({\n        value: '5',\n        coordinate: 'A1',\n        puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'\n      }).end((err, res) => {\n        let arr = {\n          \"valid\": false,\n          \"conflict\": [\"row\", \"column\", \"region\"]\n        };\n        assert.isObject(res.body);\n        assert.property(res.body, 'valid');\n        assert.property(res.body, 'conflict');\n        assert.deepEqual(res.body, arr);\n        done();\n      });\n    });\n    test('check a puzzle placement with missing required fields', done => {\n      chai.request(server).post('/api/check').send({\n        value: '5',\n        puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'\n      }).end((err, res) => {\n        let arr = {\n          \"error\": \"Required field(s) missing\"\n        };\n        assert.isObject(res.body);\n        assert.property(res.body, 'error');\n        assert.deepEqual(res.body, arr);\n        done();\n      });\n    });\n    test('check a puzzle placement with invalid characters', done => {\n      chai.request(server).post('/api/check').send({\n        value: '5',\n        coordinate: 'A1',\n        puzzle: '..9..5.1.85.4....2432......1...69.83.9..a..6.62.71...9......1945....4.37.4.3..6..'\n      }).end((err, res) => {\n        let arr = {\n          \"error\": \"Invalid characters in puzzle\"\n        };\n        assert.isObject(res.body);\n        assert.property(res.body, 'error');\n        assert.deepEqual(res.body, arr);\n        done();\n      });\n    });\n    test('check a puzzle placement with incorrect length', done => {\n      chai.request(server).post('/api/check').send({\n        value: '5',\n        coordinate: 'A1',\n        puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6.....'\n      }).end((err, res) => {\n        let arr = {\n          \"error\": 'Expected puzzle to be 81 characters long'\n        };\n        assert.isObject(res.body);\n        assert.property(res.body, 'error');\n        assert.deepEqual(res.body, arr);\n        done();\n      });\n    });\n    test('check a puzzle placement with invalid placement coordinate', done => {\n      chai.request(server).post('/api/check').send({\n        value: '5',\n        coordinate: 'A10',\n        puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'\n      }).end((err, res) => {\n        let arr = {\n          \"error\": 'Invalid coordinate'\n        };\n        assert.isObject(res.body);\n        assert.property(res.body, 'error');\n        assert.deepEqual(res.body, arr);\n        done();\n      });\n    });\n    test('check a puzzle placement with invalid placement value', done => {\n      chai.request(server).post('/api/check').send({\n        value: '50',\n        coordinate: 'A1',\n        puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'\n      }).end((err, res) => {\n        let arr = {\n          'error': 'Invalid value'\n        };\n        assert.isObject(res.body);\n        assert.property(res.body, 'error');\n        assert.deepEqual(res.body, arr);\n        done();\n      });\n    });\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "2_functional-tests.js"
      ],
      "names": [
        "chai",
        "require",
        "chaiHttp",
        "assert",
        "server",
        "use",
        "suite",
        "test",
        "done",
        "request",
        "post",
        "send",
        "puzzle",
        "end",
        "err",
        "res",
        "isObject",
        "body",
        "property",
        "equal",
        "solution",
        "error",
        "value",
        "coordinate",
        "valid",
        "arr",
        "deepEqual"
      ],
      "mappings": "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",
      "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\tests\\",
      "sourcesContent": [
        "const chai = require(\"chai\");\nconst chaiHttp = require('chai-http');\nconst assert = chai.assert;\nconst server = require('../server');\n\nchai.use(chaiHttp);\n\nsuite('Functional Tests', () => {\n\n    suite('Test POST to POST on api/solve/', () => {\n\n        test('test POST with valid puzzle string', done => {\n            chai\n            .request(server)\n            .post('/api/solve')\n            .send({puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'})\n            .end((err, res) => {\n                assert.isObject(res.body)\n                assert.property(res.body, 'solution')\n                assert.equal(res.body.solution, '769235418851496372432178956174569283395842761628713549283657194516924837947381625')\n                done()\n            })\n        })\n\n        test('test POST with missing puzzle string', done => {\n            chai\n            .request(server)\n            .post('/api/solve')\n            .send({})\n            .end((err, res) => {\n                assert.isObject(res.body)\n                assert.property(res.body, 'error')\n                assert.equal(res.body.error, 'Required field missing')\n                done()\n            })\n        })\n\n        test('test POST with invlaid characters', done => {\n            chai\n            .request(server)\n            .post('/api/solve')\n            .send({puzzle: '..9..5.1.85.4....2432......1...69.83.g.....6.62.71...9......1945....4.37.4.3..6.a'})\n            .end((err, res) => {\n                assert.isObject(res.body)\n                assert.property(res.body, 'error')\n                assert.equal(res.body.error, 'Invalid characters in puzzle')\n                done()\n            })\n        })\n\n        test('test POST with incorrect length', done => {\n            chai\n            .request(server)\n            .post('/api/solve')\n            .send({puzzle: '..9..5.1.85.4....2432......1...69.83.......6.62.71...9......1945....4.37.4.3..6....'})\n            .end((err, res) => {\n                assert.isObject(res.body)\n                assert.property(res.body, 'error')\n                assert.equal(res.body.error, 'Expected puzzle to be 81 characters long')\n                done()\n            })\n        })\n\n        test('test POST to solve puzzle that cannot be solved', done => {\n            chai\n            .request(server)\n            .post('/api/solve')\n            .send({puzzle: '..9..5.1.85.4....2432......1...69.83999999.6.62.71...9......1945....4.37.4.3..6..'})\n            .end((err, res) => {\n                assert.isObject(res.body)\n                assert.property(res.body, 'error')\n                assert.equal(res.body.error, 'Puzzle cannot be solved')\n                done()\n            })\n        })\n    })\n\n    suite('Test POST to POST on api/check/', () => {\n\n        test('check a puzzle placement with all fields', done => {\n            chai\n            .request(server)\n            .post('/api/check')\n            .send({value: '7', coordinate: 'A1', puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'})\n            .end((err, res) => {\n                assert.isObject(res.body)\n                assert.property(res.body, 'valid')\n                assert.equal(res.body.valid, true)\n                done()\n            })\n        })       \n        \n        test('check a puzzle placement with single placement conflict', done => {\n            chai\n            .request(server)\n            .post('/api/check')\n            .send({value: '1', coordinate: 'A4', puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'})\n            .end((err, res) => {\n                let arr =  { \"valid\": false, \"conflict\": [ \"row\" ] }\n\n                assert.isObject(res.body)\n                assert.property(res.body, 'valid')\n                assert.property(res.body, 'conflict')\n                assert.deepEqual(res.body, arr)\n                done()\n            })\n        })       \n\n        test('check a puzzle placement with multiple placement conflict', done => {\n            chai\n            .request(server)\n            .post('/api/check')\n            .send({value: '9', coordinate: 'A1', puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'})\n            .end((err, res) => {\n                let arr =  { \"valid\": false, \"conflict\": [ \"row\", \"region\" ] }\n\n                assert.isObject(res.body)\n                assert.property(res.body, 'valid')\n                assert.property(res.body, 'conflict')\n                assert.deepEqual(res.body, arr)\n                done()\n            })\n        })      \n        \n        test('check a puzzle placement with all placement conflict', done => {\n            chai\n            .request(server)\n            .post('/api/check')\n            .send({value: '5', coordinate: 'A1', puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'})\n            .end((err, res) => {\n                let arr =  { \"valid\": false, \"conflict\": [ \"row\", \"column\",\"region\" ] }\n\n                assert.isObject(res.body)\n                assert.property(res.body, 'valid')\n                assert.property(res.body, 'conflict')\n                assert.deepEqual(res.body, arr)\n                done()\n            })\n        })\n        \n        test('check a puzzle placement with missing required fields', done => {\n            chai\n            .request(server)\n            .post('/api/check')\n            .send({value: '5', puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'})\n            .end((err, res) => {\n                let arr =  { \"error\": \"Required field(s) missing\" }\n\n                assert.isObject(res.body)\n                assert.property(res.body, 'error')\n                assert.deepEqual(res.body, arr)\n                done()\n            })\n        })   \n        \n        test('check a puzzle placement with invalid characters', done => {\n            chai\n            .request(server)\n            .post('/api/check')\n            .send({value: '5', coordinate: 'A1', puzzle: '..9..5.1.85.4....2432......1...69.83.9..a..6.62.71...9......1945....4.37.4.3..6..'})\n            .end((err, res) => {\n                let arr =  { \"error\": \"Invalid characters in puzzle\" }\n\n                assert.isObject(res.body)\n                assert.property(res.body, 'error')\n                assert.deepEqual(res.body, arr)\n                done()\n            })\n        })   \n\n        test('check a puzzle placement with incorrect length', done => {\n            chai\n            .request(server)\n            .post('/api/check')\n            .send({value: '5', coordinate: 'A1', puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6.....'})\n            .end((err, res) => {\n                let arr =  { \"error\": 'Expected puzzle to be 81 characters long'}\n\n                assert.isObject(res.body)\n                assert.property(res.body, 'error')\n                assert.deepEqual(res.body, arr)\n                done()\n            })\n        })   \n\n        test('check a puzzle placement with invalid placement coordinate', done => {\n            chai\n            .request(server)\n            .post('/api/check')\n            .send({value: '5', coordinate: 'A10', puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'})\n            .end((err, res) => {\n                let arr =  { \"error\": 'Invalid coordinate'}\n\n                assert.isObject(res.body)\n                assert.property(res.body, 'error')\n                assert.deepEqual(res.body, arr)\n                done()\n            })\n        })   \n\n        test('check a puzzle placement with invalid placement value', done => {\n            chai\n            .request(server)\n            .post('/api/check')\n            .send({value: '50', coordinate: 'A1', puzzle: '..9..5.1.85.4....2432......1...69.83.9.....6.62.71...9......1945....4.37.4.3..6..'})\n            .end((err, res) => {\n                let arr =  { 'error': 'Invalid value'}\n\n                assert.isObject(res.body)\n                assert.property(res.body, 'error')\n                assert.deepEqual(res.body, arr)\n                done()\n            })\n        })   \n\n    })\n\n});\n\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1761066612476
  },
  "{\"sourceRoot\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\",\"filename\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\\\\server.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\",\"plugins\":[],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver",
      "filename": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\server.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\server.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "require('dotenv').config({\n  path: './sample.env'\n});\n\nconst express = require('express');\n\nconst bodyParser = require('body-parser');\n\nconst expect = require('chai').expect;\n\nconst cors = require('cors');\n\nconst fccTestingRoutes = require('./routes/fcctesting.js');\n\nconst apiRoutes = require('./routes/api.js');\n\nconst runner = require('./test-runner');\n\nconst app = express();\napp.use('/public', express.static(process.cwd() + '/public'));\napp.use(cors({\n  origin: '*'\n})); //For FCC testing purposes only\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n})); //Index page (static HTML)\n\napp.route('/').get(function (req, res) {\n  res.sendFile(process.cwd() + '/views/index.html');\n}); //For FCC testing purposes\n\nfccTestingRoutes(app); // User routes\n\napiRoutes(app); //404 Not Found Middleware\n\napp.use(function (req, res, next) {\n  res.status(404).type('text').send('Not Found');\n}); //Start our server and tests!\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, function () {\n  console.log(\"Listening on port \" + PORT); // process.env.NODE_ENV='test'\n\n  if (process.env.NODE_ENV === 'test') {\n    console.log('Running Tests...');\n    setTimeout(function () {\n      try {\n        runner.run();\n      } catch (error) {\n        console.log('Tests are not valid:');\n        console.error(error);\n      }\n    }, 1500);\n  }\n});\nmodule.exports = app; // for testing\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiY29uZmlnIiwicGF0aCIsImV4cHJlc3MiLCJib2R5UGFyc2VyIiwiZXhwZWN0IiwiY29ycyIsImZjY1Rlc3RpbmdSb3V0ZXMiLCJhcGlSb3V0ZXMiLCJydW5uZXIiLCJhcHAiLCJ1c2UiLCJzdGF0aWMiLCJwcm9jZXNzIiwiY3dkIiwib3JpZ2luIiwianNvbiIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsInJvdXRlIiwiZ2V0IiwicmVxIiwicmVzIiwic2VuZEZpbGUiLCJuZXh0Iiwic3RhdHVzIiwidHlwZSIsInNlbmQiLCJQT1JUIiwiZW52IiwibGlzdGVuIiwiY29uc29sZSIsImxvZyIsIk5PREVfRU5WIiwic2V0VGltZW91dCIsInJ1biIsImVycm9yIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU8sQ0FBQyxRQUFELENBQVAsQ0FBa0JDLE1BQWxCLENBQXlCO0FBQUNDLEVBQUFBLElBQUksRUFBRTtBQUFQLENBQXpCOztBQUNBLE1BQU1DLE9BQU8sR0FBT0gsT0FBTyxDQUFDLFNBQUQsQ0FBM0I7O0FBQ0EsTUFBTUksVUFBVSxHQUFJSixPQUFPLENBQUMsYUFBRCxDQUEzQjs7QUFDQSxNQUFNSyxNQUFNLEdBQVFMLE9BQU8sQ0FBQyxNQUFELENBQVAsQ0FBZ0JLLE1BQXBDOztBQUNBLE1BQU1DLElBQUksR0FBVU4sT0FBTyxDQUFDLE1BQUQsQ0FBM0I7O0FBRUEsTUFBTU8sZ0JBQWdCLEdBQUlQLE9BQU8sQ0FBQyx3QkFBRCxDQUFqQzs7QUFDQSxNQUFNUSxTQUFTLEdBQVdSLE9BQU8sQ0FBQyxpQkFBRCxDQUFqQzs7QUFDQSxNQUFNUyxNQUFNLEdBQWNULE9BQU8sQ0FBQyxlQUFELENBQWpDOztBQUVBLE1BQU1VLEdBQUcsR0FBR1AsT0FBTyxFQUFuQjtBQUVBTyxHQUFHLENBQUNDLEdBQUosQ0FBUSxTQUFSLEVBQW1CUixPQUFPLENBQUNTLE1BQVIsQ0FBZUMsT0FBTyxDQUFDQyxHQUFSLEtBQWdCLFNBQS9CLENBQW5CO0FBQ0FKLEdBQUcsQ0FBQ0MsR0FBSixDQUFRTCxJQUFJLENBQUM7QUFBQ1MsRUFBQUEsTUFBTSxFQUFFO0FBQVQsQ0FBRCxDQUFaLEUsQ0FBOEI7O0FBRTlCTCxHQUFHLENBQUNDLEdBQUosQ0FBUVAsVUFBVSxDQUFDWSxJQUFYLEVBQVI7QUFDQU4sR0FBRyxDQUFDQyxHQUFKLENBQVFQLFVBQVUsQ0FBQ2EsVUFBWCxDQUFzQjtBQUFFQyxFQUFBQSxRQUFRLEVBQUU7QUFBWixDQUF0QixDQUFSLEUsQ0FFQTs7QUFDQVIsR0FBRyxDQUFDUyxLQUFKLENBQVUsR0FBVixFQUNHQyxHQURILENBQ08sVUFBVUMsR0FBVixFQUFlQyxHQUFmLEVBQW9CO0FBQ3ZCQSxFQUFBQSxHQUFHLENBQUNDLFFBQUosQ0FBYVYsT0FBTyxDQUFDQyxHQUFSLEtBQWdCLG1CQUE3QjtBQUNELENBSEgsRSxDQUtBOztBQUNBUCxnQkFBZ0IsQ0FBQ0csR0FBRCxDQUFoQixDLENBRUE7O0FBQ0FGLFNBQVMsQ0FBQ0UsR0FBRCxDQUFULEMsQ0FFQTs7QUFDQUEsR0FBRyxDQUFDQyxHQUFKLENBQVEsVUFBU1UsR0FBVCxFQUFjQyxHQUFkLEVBQW1CRSxJQUFuQixFQUF5QjtBQUMvQkYsRUFBQUEsR0FBRyxDQUFDRyxNQUFKLENBQVcsR0FBWCxFQUNHQyxJQURILENBQ1EsTUFEUixFQUVHQyxJQUZILENBRVEsV0FGUjtBQUdELENBSkQsRSxDQU1BOztBQUNBLE1BQU1DLElBQUksR0FBR2YsT0FBTyxDQUFDZ0IsR0FBUixDQUFZRCxJQUFaLElBQW9CLElBQWpDO0FBQ0FsQixHQUFHLENBQUNvQixNQUFKLENBQVdGLElBQVgsRUFBaUIsWUFBWTtBQUMzQkcsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksdUJBQXVCSixJQUFuQyxFQUQyQixDQUUzQjs7QUFDQSxNQUFJZixPQUFPLENBQUNnQixHQUFSLENBQVlJLFFBQVosS0FBdUIsTUFBM0IsRUFBbUM7QUFDakNGLElBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGtCQUFaO0FBQ0FFLElBQUFBLFVBQVUsQ0FBQyxZQUFZO0FBQ3JCLFVBQUk7QUFDRnpCLFFBQUFBLE1BQU0sQ0FBQzBCLEdBQVA7QUFDRCxPQUZELENBRUUsT0FBT0MsS0FBUCxFQUFjO0FBQ2RMLFFBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHNCQUFaO0FBQ0FELFFBQUFBLE9BQU8sQ0FBQ0ssS0FBUixDQUFjQSxLQUFkO0FBQ0Q7QUFDRixLQVBTLEVBT1AsSUFQTyxDQUFWO0FBUUQ7QUFDRixDQWREO0FBZ0JBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI1QixHQUFqQixDLENBQXNCIiwic291cmNlUm9vdCI6IkQ6XFxLw6w3XFxrdFxcZ2l0XFxRdWFsaXR5LUFzc3VyYW5jZS1Qcm9qZWN0cy1tYXN0ZXJcXFF1YWxpdHktQXNzdXJhbmNlLVByb2plY3RzLW1hc3RlclxcU29kb2t1IFNvbHZlclxcIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnZG90ZW52JykuY29uZmlnKHtwYXRoOiAnLi9zYW1wbGUuZW52J30pO1xuY29uc3QgZXhwcmVzcyAgICAgPSByZXF1aXJlKCdleHByZXNzJyk7XG5jb25zdCBib2R5UGFyc2VyICA9IHJlcXVpcmUoJ2JvZHktcGFyc2VyJyk7XG5jb25zdCBleHBlY3QgICAgICA9IHJlcXVpcmUoJ2NoYWknKS5leHBlY3Q7XG5jb25zdCBjb3JzICAgICAgICA9IHJlcXVpcmUoJ2NvcnMnKTtcblxuY29uc3QgZmNjVGVzdGluZ1JvdXRlcyAgPSByZXF1aXJlKCcuL3JvdXRlcy9mY2N0ZXN0aW5nLmpzJyk7XG5jb25zdCBhcGlSb3V0ZXMgICAgICAgICA9IHJlcXVpcmUoJy4vcm91dGVzL2FwaS5qcycpO1xuY29uc3QgcnVubmVyICAgICAgICAgICAgPSByZXF1aXJlKCcuL3Rlc3QtcnVubmVyJyk7XG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcblxuYXBwLnVzZSgnL3B1YmxpYycsIGV4cHJlc3Muc3RhdGljKHByb2Nlc3MuY3dkKCkgKyAnL3B1YmxpYycpKTtcbmFwcC51c2UoY29ycyh7b3JpZ2luOiAnKid9KSk7IC8vRm9yIEZDQyB0ZXN0aW5nIHB1cnBvc2VzIG9ubHlcblxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG5hcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcblxuLy9JbmRleCBwYWdlIChzdGF0aWMgSFRNTClcbmFwcC5yb3V0ZSgnLycpXG4gIC5nZXQoZnVuY3Rpb24gKHJlcSwgcmVzKSB7XG4gICAgcmVzLnNlbmRGaWxlKHByb2Nlc3MuY3dkKCkgKyAnL3ZpZXdzL2luZGV4Lmh0bWwnKTtcbiAgfSk7XG5cbi8vRm9yIEZDQyB0ZXN0aW5nIHB1cnBvc2VzXG5mY2NUZXN0aW5nUm91dGVzKGFwcCk7XG5cbi8vIFVzZXIgcm91dGVzXG5hcGlSb3V0ZXMoYXBwKTtcbiAgICBcbi8vNDA0IE5vdCBGb3VuZCBNaWRkbGV3YXJlXG5hcHAudXNlKGZ1bmN0aW9uKHJlcSwgcmVzLCBuZXh0KSB7XG4gIHJlcy5zdGF0dXMoNDA0KVxuICAgIC50eXBlKCd0ZXh0JylcbiAgICAuc2VuZCgnTm90IEZvdW5kJyk7XG59KTtcblxuLy9TdGFydCBvdXIgc2VydmVyIGFuZCB0ZXN0cyFcbmNvbnN0IFBPUlQgPSBwcm9jZXNzLmVudi5QT1JUIHx8IDMwMDBcbmFwcC5saXN0ZW4oUE9SVCwgZnVuY3Rpb24gKCkge1xuICBjb25zb2xlLmxvZyhcIkxpc3RlbmluZyBvbiBwb3J0IFwiICsgUE9SVCk7XG4gIC8vIHByb2Nlc3MuZW52Lk5PREVfRU5WPSd0ZXN0J1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlY9PT0ndGVzdCcpIHtcbiAgICBjb25zb2xlLmxvZygnUnVubmluZyBUZXN0cy4uLicpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcnVubmVyLnJ1bigpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1Rlc3RzIGFyZSBub3QgdmFsaWQ6Jyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgfVxuICAgIH0sIDE1MDApO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBhcHA7IC8vIGZvciB0ZXN0aW5nXG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "require",
        "config",
        "path",
        "express",
        "bodyParser",
        "expect",
        "cors",
        "fccTestingRoutes",
        "apiRoutes",
        "runner",
        "app",
        "use",
        "static",
        "process",
        "cwd",
        "origin",
        "json",
        "urlencoded",
        "extended",
        "route",
        "get",
        "req",
        "res",
        "sendFile",
        "next",
        "status",
        "type",
        "send",
        "PORT",
        "env",
        "listen",
        "console",
        "log",
        "NODE_ENV",
        "setTimeout",
        "run",
        "error",
        "module",
        "exports"
      ],
      "mappings": "AAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB,CAAyB;AAACC,EAAAA,IAAI,EAAE;AAAP,CAAzB;;AACA,MAAMC,OAAO,GAAOH,OAAO,CAAC,SAAD,CAA3B;;AACA,MAAMI,UAAU,GAAIJ,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMK,MAAM,GAAQL,OAAO,CAAC,MAAD,CAAP,CAAgBK,MAApC;;AACA,MAAMC,IAAI,GAAUN,OAAO,CAAC,MAAD,CAA3B;;AAEA,MAAMO,gBAAgB,GAAIP,OAAO,CAAC,wBAAD,CAAjC;;AACA,MAAMQ,SAAS,GAAWR,OAAO,CAAC,iBAAD,CAAjC;;AACA,MAAMS,MAAM,GAAcT,OAAO,CAAC,eAAD,CAAjC;;AAEA,MAAMU,GAAG,GAAGP,OAAO,EAAnB;AAEAO,GAAG,CAACC,GAAJ,CAAQ,SAAR,EAAmBR,OAAO,CAACS,MAAR,CAAeC,OAAO,CAACC,GAAR,KAAgB,SAA/B,CAAnB;AACAJ,GAAG,CAACC,GAAJ,CAAQL,IAAI,CAAC;AAACS,EAAAA,MAAM,EAAE;AAAT,CAAD,CAAZ,E,CAA8B;;AAE9BL,GAAG,CAACC,GAAJ,CAAQP,UAAU,CAACY,IAAX,EAAR;AACAN,GAAG,CAACC,GAAJ,CAAQP,UAAU,CAACa,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR,E,CAEA;;AACAR,GAAG,CAACS,KAAJ,CAAU,GAAV,EACGC,GADH,CACO,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACvBA,EAAAA,GAAG,CAACC,QAAJ,CAAaV,OAAO,CAACC,GAAR,KAAgB,mBAA7B;AACD,CAHH,E,CAKA;;AACAP,gBAAgB,CAACG,GAAD,CAAhB,C,CAEA;;AACAF,SAAS,CAACE,GAAD,CAAT,C,CAEA;;AACAA,GAAG,CAACC,GAAJ,CAAQ,UAASU,GAAT,EAAcC,GAAd,EAAmBE,IAAnB,EAAyB;AAC/BF,EAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EACGC,IADH,CACQ,MADR,EAEGC,IAFH,CAEQ,WAFR;AAGD,CAJD,E,CAMA;;AACA,MAAMC,IAAI,GAAGf,OAAO,CAACgB,GAAR,CAAYD,IAAZ,IAAoB,IAAjC;AACAlB,GAAG,CAACoB,MAAJ,CAAWF,IAAX,EAAiB,YAAY;AAC3BG,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAuBJ,IAAnC,EAD2B,CAE3B;;AACA,MAAIf,OAAO,CAACgB,GAAR,CAAYI,QAAZ,KAAuB,MAA3B,EAAmC;AACjCF,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAE,IAAAA,UAAU,CAAC,YAAY;AACrB,UAAI;AACFzB,QAAAA,MAAM,CAAC0B,GAAP;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc;AACdL,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,QAAAA,OAAO,CAACK,KAAR,CAAcA,KAAd;AACD;AACF,KAPS,EAOP,IAPO,CAAV;AAQD;AACF,CAdD;AAgBAC,MAAM,CAACC,OAAP,GAAiB5B,GAAjB,C,CAAsB",
      "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\",
      "sourcesContent": [
        "require('dotenv').config({path: './sample.env'});\nconst express     = require('express');\nconst bodyParser  = require('body-parser');\nconst expect      = require('chai').expect;\nconst cors        = require('cors');\n\nconst fccTestingRoutes  = require('./routes/fcctesting.js');\nconst apiRoutes         = require('./routes/api.js');\nconst runner            = require('./test-runner');\n\nconst app = express();\n\napp.use('/public', express.static(process.cwd() + '/public'));\napp.use(cors({origin: '*'})); //For FCC testing purposes only\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n//Index page (static HTML)\napp.route('/')\n  .get(function (req, res) {\n    res.sendFile(process.cwd() + '/views/index.html');\n  });\n\n//For FCC testing purposes\nfccTestingRoutes(app);\n\n// User routes\napiRoutes(app);\n    \n//404 Not Found Middleware\napp.use(function(req, res, next) {\n  res.status(404)\n    .type('text')\n    .send('Not Found');\n});\n\n//Start our server and tests!\nconst PORT = process.env.PORT || 3000\napp.listen(PORT, function () {\n  console.log(\"Listening on port \" + PORT);\n  // process.env.NODE_ENV='test'\n  if (process.env.NODE_ENV==='test') {\n    console.log('Running Tests...');\n    setTimeout(function () {\n      try {\n        runner.run();\n      } catch (error) {\n        console.log('Tests are not valid:');\n        console.error(error);\n      }\n    }, 1500);\n  }\n});\n\nmodule.exports = app; // for testing\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1761066612430
  },
  "{\"sourceRoot\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\\\\routes\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\",\"filename\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\\\\routes\\\\fcctesting.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\",\"plugins\":[],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\routes\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver",
      "filename": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\routes\\fcctesting.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\routes\\fcctesting.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\routes\\fcctesting.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\routes\\",
        "sourceFileName": "fcctesting.js"
      }
    },
    "ast": null,
    "code": "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\n'use strict';\n\nconst cors = require('cors');\n\nconst fs = require('fs');\n\nconst runner = require('../test-runner');\n\nmodule.exports = function (app) {\n  app.route('/_api/server.js').get(function (req, res, next) {\n    console.log('requested');\n    fs.readFile(__dirname + '/server.js', function (err, data) {\n      if (err) return next(err);\n      res.send(data.toString());\n    });\n  });\n  app.route('/_api/routes/api.js').get(function (req, res, next) {\n    console.log('requested');\n    fs.readFile(__dirname + '/routes/api.js', function (err, data) {\n      if (err) return next(err);\n      res.type('txt').send(data.toString());\n    });\n  });\n  app.route('/_api/controllers/convertHandler.js').get(function (req, res, next) {\n    console.log('requested');\n    fs.readFile(__dirname + '/controllers/convertHandler.js', function (err, data) {\n      if (err) return next(err);\n      res.type('txt').send(data.toString());\n    });\n  });\n  let error;\n  app.get('/_api/get-tests', cors(), function (req, res, next) {\n    console.log(error);\n    if (!error && process.env.NODE_ENV === 'test') return next();\n    res.json({\n      status: 'unavailable'\n    });\n  }, function (req, res, next) {\n    if (!runner.report) return next();\n    res.json(testFilter(runner.report, req.query.type, req.query.n));\n  }, function (req, res) {\n    runner.on('done', function (report) {\n      process.nextTick(() => res.json(testFilter(runner.report, req.query.type, req.query.n)));\n    });\n  });\n  app.get('/_api/app-info', function (req, res) {\n    let hs = Object.keys(res._headers).filter(h => !h.match(/^access-control-\\w+/));\n    let hObj = {};\n    hs.forEach(h => {\n      hObj[h] = res._headers[h];\n    });\n    delete res._headers['strict-transport-security'];\n    res.json({\n      headers: hObj\n    });\n  });\n};\n\nfunction testFilter(tests, type, n) {\n  let out;\n\n  switch (type) {\n    case 'unit':\n      out = tests.filter(t => t.context.match('Unit Tests'));\n      break;\n\n    case 'functional':\n      out = tests.filter(t => t.context.match('Functional Tests') && !t.title.match('#example'));\n      break;\n\n    default:\n      out = tests;\n  }\n\n  if (n !== undefined) {\n    return out[n] || out;\n  }\n\n  return out;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "fcctesting.js"
      ],
      "names": [
        "cors",
        "require",
        "fs",
        "runner",
        "module",
        "exports",
        "app",
        "route",
        "get",
        "req",
        "res",
        "next",
        "console",
        "log",
        "readFile",
        "__dirname",
        "err",
        "data",
        "send",
        "toString",
        "type",
        "error",
        "process",
        "env",
        "NODE_ENV",
        "json",
        "status",
        "report",
        "testFilter",
        "query",
        "n",
        "on",
        "nextTick",
        "hs",
        "Object",
        "keys",
        "_headers",
        "filter",
        "h",
        "match",
        "hObj",
        "forEach",
        "headers",
        "tests",
        "out",
        "t",
        "context",
        "title",
        "undefined"
      ],
      "mappings": "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",
      "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\routes\\",
      "sourcesContent": [
        "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\n\n'use strict';\n\nconst cors = require('cors');\nconst fs = require('fs');\nconst runner = require('../test-runner');\n\nmodule.exports = function (app) {\n\n  app.route('/_api/server.js')\n    .get(function(req, res, next) {\n      console.log('requested');\n      fs.readFile(__dirname + '/server.js', function(err, data) {\n        if(err) return next(err);\n        res.send(data.toString());\n      });\n    });\n  app.route('/_api/routes/api.js')\n    .get(function(req, res, next) {\n      console.log('requested');\n      fs.readFile(__dirname + '/routes/api.js', function(err, data) {\n        if(err) return next(err);\n        res.type('txt').send(data.toString());\n      });\n    });\n  app.route('/_api/controllers/convertHandler.js')\n    .get(function(req, res, next) {\n      console.log('requested');\n      fs.readFile(__dirname + '/controllers/convertHandler.js', function(err, data) {\n        if(err) return next(err);\n        res.type('txt').send(data.toString());\n      });\n    });\n    \n  let error;\n  app.get('/_api/get-tests', cors(), function(req, res, next){\n    console.log(error);\n    if(!error && process.env.NODE_ENV === 'test') return next();\n    res.json({status: 'unavailable'});\n  },\n  function(req, res, next){\n    if(!runner.report) return next();\n    res.json(testFilter(runner.report, req.query.type, req.query.n));\n  },\n  function(req, res){\n    runner.on('done', function(report){\n      process.nextTick(() =>  res.json(testFilter(runner.report, req.query.type, req.query.n)));\n    });\n  });\n  app.get('/_api/app-info', function(req, res) {\n    let hs = Object.keys(res._headers)\n      .filter(h => !h.match(/^access-control-\\w+/));\n    let hObj = {};\n    hs.forEach(h => {hObj[h] = res._headers[h]});\n    delete res._headers['strict-transport-security'];\n    res.json({headers: hObj});\n  });\n  \n};\n\nfunction testFilter(tests, type, n) {\n  let out;\n  switch (type) {\n    case 'unit' :\n      out = tests.filter(t => t.context.match('Unit Tests'));\n      break;\n    case 'functional':\n      out = tests.filter(t => t.context.match('Functional Tests') && !t.title.match('#example'));\n      break;\n    default:\n      out = tests;\n  }\n  if(n !== undefined) {\n    return out[n] || out;\n  }\n  return out;\n}"
      ]
    },
    "sourceType": "module",
    "mtime": 1761066612465
  },
  "{\"sourceRoot\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\",\"filename\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\\\\test-runner.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\",\"plugins\":[],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver",
      "filename": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\test-runner.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\test-runner.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\test-runner.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\",
        "sourceFileName": "test-runner.js"
      }
    },
    "ast": null,
    "code": "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\nconst analyser = require('./assertion-analyser');\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst Mocha = require('mocha'),\n      fs = require('fs'),\n      path = require('path');\n\nrequire(\"@babel/register\");\n\nconst mocha = new Mocha({\n  timeout: 5000\n});\nconst testDir = './tests'; // Add each .js file to the mocha instance\n\nfs.readdirSync(testDir).filter(function (file) {\n  // Only keep the .js files\n  return file.substr(-3) === '.js';\n}).forEach(function (file) {\n  mocha.addFile(path.join(testDir, file));\n});\nlet emitter = new EventEmitter();\n\nemitter.run = function () {\n  let tests = [];\n  let context = \"\";\n  let separator = ' -> '; // Run the tests.\n\n  try {\n    let runner = mocha.ui('tdd').run().on('test end', function (test) {\n      // remove comments\n      let body = test.body.replace(/\\/\\/.*\\n|\\/\\*.*\\*\\//g, ''); // collapse spaces\n\n      body = body.replace(/\\s+/g, ' ');\n      let obj = {\n        title: test.title,\n        context: context.slice(0, -separator.length),\n        state: test.state,\n        // body: body,\n        assertions: analyser(body)\n      };\n      tests.push(obj);\n    }).on('end', function () {\n      emitter.report = tests;\n      emitter.emit('done', tests);\n    }).on('suite', function (s) {\n      context += s.title + separator;\n    }).on('suite end', function (s) {\n      context = context.slice(0, -(s.title.length + separator.length));\n    });\n  } catch (e) {\n    throw e;\n  }\n};\n\nmodule.exports = emitter;\n/*\n * Mocha.runner Events:\n * can be used to build a better custom report\n *\n *   - `start`  execution started\n *   - `end`  execution complete\n *   - `suite`  (suite) test suite execution started\n *   - `suite end`  (suite) all tests (and sub-suites) have finished\n *   - `test`  (test) test execution started\n *   - `test end`  (test) test completed\n *   - `hook`  (hook) hook execution started\n *   - `hook end`  (hook) hook complete\n *   - `pass`  (test) test passed\n *   - `fail`  (test, err) test failed\n *   - `pending`  (test) test pending\n */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QtcnVubmVyLmpzIl0sIm5hbWVzIjpbImFuYWx5c2VyIiwicmVxdWlyZSIsIkV2ZW50RW1pdHRlciIsIk1vY2hhIiwiZnMiLCJwYXRoIiwibW9jaGEiLCJ0aW1lb3V0IiwidGVzdERpciIsInJlYWRkaXJTeW5jIiwiZmlsdGVyIiwiZmlsZSIsInN1YnN0ciIsImZvckVhY2giLCJhZGRGaWxlIiwiam9pbiIsImVtaXR0ZXIiLCJydW4iLCJ0ZXN0cyIsImNvbnRleHQiLCJzZXBhcmF0b3IiLCJydW5uZXIiLCJ1aSIsIm9uIiwidGVzdCIsImJvZHkiLCJyZXBsYWNlIiwib2JqIiwidGl0bGUiLCJzbGljZSIsImxlbmd0aCIsInN0YXRlIiwiYXNzZXJ0aW9ucyIsInB1c2giLCJyZXBvcnQiLCJlbWl0IiwicyIsImUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEyQkEsTUFBTUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsc0JBQUQsQ0FBeEI7O0FBQ0EsTUFBTUMsWUFBWSxHQUFHRCxPQUFPLENBQUMsUUFBRCxDQUFQLENBQWtCQyxZQUF2Qzs7QUFFQSxNQUFNQyxLQUFLLEdBQUdGLE9BQU8sQ0FBQyxPQUFELENBQXJCO0FBQUEsTUFDSUcsRUFBRSxHQUFHSCxPQUFPLENBQUMsSUFBRCxDQURoQjtBQUFBLE1BRUlJLElBQUksR0FBR0osT0FBTyxDQUFDLE1BQUQsQ0FGbEI7O0FBR0lBLE9BQU8sQ0FBQyxpQkFBRCxDQUFQOztBQUVKLE1BQU1LLEtBQUssR0FBRyxJQUFJSCxLQUFKLENBQVU7QUFBRUksRUFBQUEsT0FBTyxFQUFFO0FBQVgsQ0FBVixDQUFkO0FBQ0EsTUFBTUMsT0FBTyxHQUFHLFNBQWhCLEMsQ0FHQTs7QUFDQUosRUFBRSxDQUFDSyxXQUFILENBQWVELE9BQWYsRUFBd0JFLE1BQXhCLENBQStCLFVBQVNDLElBQVQsRUFBYztBQUN6QztBQUNBLFNBQU9BLElBQUksQ0FBQ0MsTUFBTCxDQUFZLENBQUMsQ0FBYixNQUFvQixLQUEzQjtBQUVILENBSkQsRUFJR0MsT0FKSCxDQUlXLFVBQVNGLElBQVQsRUFBYztBQUNyQkwsRUFBQUEsS0FBSyxDQUFDUSxPQUFOLENBQ0lULElBQUksQ0FBQ1UsSUFBTCxDQUFVUCxPQUFWLEVBQW1CRyxJQUFuQixDQURKO0FBR0gsQ0FSRDtBQVVBLElBQUlLLE9BQU8sR0FBRyxJQUFJZCxZQUFKLEVBQWQ7O0FBQ0FjLE9BQU8sQ0FBQ0MsR0FBUixHQUFjLFlBQVc7QUFFdkIsTUFBSUMsS0FBSyxHQUFHLEVBQVo7QUFDQSxNQUFJQyxPQUFPLEdBQUcsRUFBZDtBQUNBLE1BQUlDLFNBQVMsR0FBRyxNQUFoQixDQUp1QixDQUt2Qjs7QUFDQSxNQUFJO0FBQ0osUUFBSUMsTUFBTSxHQUFHZixLQUFLLENBQUNnQixFQUFOLENBQVMsS0FBVCxFQUFnQkwsR0FBaEIsR0FDVk0sRUFEVSxDQUNQLFVBRE8sRUFDSyxVQUFTQyxJQUFULEVBQWU7QUFDM0I7QUFDQSxVQUFJQyxJQUFJLEdBQUdELElBQUksQ0FBQ0MsSUFBTCxDQUFVQyxPQUFWLENBQWtCLHNCQUFsQixFQUEwQyxFQUExQyxDQUFYLENBRjJCLENBRzNCOztBQUNBRCxNQUFBQSxJQUFJLEdBQUdBLElBQUksQ0FBQ0MsT0FBTCxDQUFhLE1BQWIsRUFBb0IsR0FBcEIsQ0FBUDtBQUNBLFVBQUlDLEdBQUcsR0FBRztBQUNSQyxRQUFBQSxLQUFLLEVBQUVKLElBQUksQ0FBQ0ksS0FESjtBQUVSVCxRQUFBQSxPQUFPLEVBQUVBLE9BQU8sQ0FBQ1UsS0FBUixDQUFjLENBQWQsRUFBaUIsQ0FBQ1QsU0FBUyxDQUFDVSxNQUE1QixDQUZEO0FBR1JDLFFBQUFBLEtBQUssRUFBRVAsSUFBSSxDQUFDTyxLQUhKO0FBSVI7QUFDQUMsUUFBQUEsVUFBVSxFQUFFaEMsUUFBUSxDQUFDeUIsSUFBRDtBQUxaLE9BQVY7QUFPQVAsTUFBQUEsS0FBSyxDQUFDZSxJQUFOLENBQVdOLEdBQVg7QUFDSCxLQWRVLEVBZVZKLEVBZlUsQ0FlUCxLQWZPLEVBZUEsWUFBVztBQUNsQlAsTUFBQUEsT0FBTyxDQUFDa0IsTUFBUixHQUFpQmhCLEtBQWpCO0FBQ0FGLE1BQUFBLE9BQU8sQ0FBQ21CLElBQVIsQ0FBYSxNQUFiLEVBQXFCakIsS0FBckI7QUFDSCxLQWxCVSxFQW1CVkssRUFuQlUsQ0FtQlAsT0FuQk8sRUFtQkUsVUFBU2EsQ0FBVCxFQUFZO0FBQ3ZCakIsTUFBQUEsT0FBTyxJQUFLaUIsQ0FBQyxDQUFDUixLQUFGLEdBQVVSLFNBQXRCO0FBRUQsS0F0QlUsRUF1QlZHLEVBdkJVLENBdUJQLFdBdkJPLEVBdUJNLFVBQVNhLENBQVQsRUFBWTtBQUMzQmpCLE1BQUFBLE9BQU8sR0FBR0EsT0FBTyxDQUFDVSxLQUFSLENBQWMsQ0FBZCxFQUFpQixFQUFFTyxDQUFDLENBQUNSLEtBQUYsQ0FBUUUsTUFBUixHQUFpQlYsU0FBUyxDQUFDVSxNQUE3QixDQUFqQixDQUFWO0FBQ0QsS0F6QlUsQ0FBYjtBQTBCQyxHQTNCRCxDQTJCRSxPQUFNTyxDQUFOLEVBQVM7QUFDVCxVQUFNQSxDQUFOO0FBQ0Q7QUFDRixDQXBDRDs7QUFzQ0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnZCLE9BQWpCO0FBRUEiLCJzb3VyY2VSb290IjoiRDpcXEvDrDdcXGt0XFxnaXRcXFF1YWxpdHktQXNzdXJhbmNlLVByb2plY3RzLW1hc3RlclxcUXVhbGl0eS1Bc3N1cmFuY2UtUHJvamVjdHMtbWFzdGVyXFxTb2Rva3UgU29sdmVyXFwiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKiAgICAgICBETyBOT1QgRURJVCBUSElTIEZJTEVcbiogICAgICAgRm9yIEZDQyB0ZXN0aW5nIHB1cnBvc2VzIVxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKlxuKi9cblxuY29uc3QgYW5hbHlzZXIgPSByZXF1aXJlKCcuL2Fzc2VydGlvbi1hbmFseXNlcicpO1xuY29uc3QgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyO1xuXG5jb25zdCBNb2NoYSA9IHJlcXVpcmUoJ21vY2hhJyksXG4gICAgZnMgPSByZXF1aXJlKCdmcycpLFxuICAgIHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG4gICAgcmVxdWlyZShcIkBiYWJlbC9yZWdpc3RlclwiKTtcblxuY29uc3QgbW9jaGEgPSBuZXcgTW9jaGEoeyB0aW1lb3V0OiA1MDAwIH0pO1xuY29uc3QgdGVzdERpciA9ICcuL3Rlc3RzJ1xuXG5cbi8vIEFkZCBlYWNoIC5qcyBmaWxlIHRvIHRoZSBtb2NoYSBpbnN0YW5jZVxuZnMucmVhZGRpclN5bmModGVzdERpcikuZmlsdGVyKGZ1bmN0aW9uKGZpbGUpe1xuICAgIC8vIE9ubHkga2VlcCB0aGUgLmpzIGZpbGVzXG4gICAgcmV0dXJuIGZpbGUuc3Vic3RyKC0zKSA9PT0gJy5qcyc7XG5cbn0pLmZvckVhY2goZnVuY3Rpb24oZmlsZSl7XG4gICAgbW9jaGEuYWRkRmlsZShcbiAgICAgICAgcGF0aC5qb2luKHRlc3REaXIsIGZpbGUpXG4gICAgKTtcbn0pO1xuXG5sZXQgZW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbmVtaXR0ZXIucnVuID0gZnVuY3Rpb24oKSB7XG5cbiAgbGV0IHRlc3RzID0gW107XG4gIGxldCBjb250ZXh0ID0gXCJcIjtcbiAgbGV0IHNlcGFyYXRvciA9ICcgLT4gJztcbiAgLy8gUnVuIHRoZSB0ZXN0cy5cbiAgdHJ5IHtcbiAgbGV0IHJ1bm5lciA9IG1vY2hhLnVpKCd0ZGQnKS5ydW4oKVxuICAgIC5vbigndGVzdCBlbmQnLCBmdW5jdGlvbih0ZXN0KSB7XG4gICAgICAgIC8vIHJlbW92ZSBjb21tZW50c1xuICAgICAgICBsZXQgYm9keSA9IHRlc3QuYm9keS5yZXBsYWNlKC9cXC9cXC8uKlxcbnxcXC9cXCouKlxcKlxcLy9nLCAnJyk7XG4gICAgICAgIC8vIGNvbGxhcHNlIHNwYWNlc1xuICAgICAgICBib2R5ID0gYm9keS5yZXBsYWNlKC9cXHMrL2csJyAnKTtcbiAgICAgICAgbGV0IG9iaiA9IHtcbiAgICAgICAgICB0aXRsZTogdGVzdC50aXRsZSxcbiAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LnNsaWNlKDAsIC1zZXBhcmF0b3IubGVuZ3RoKSxcbiAgICAgICAgICBzdGF0ZTogdGVzdC5zdGF0ZSxcbiAgICAgICAgICAvLyBib2R5OiBib2R5LFxuICAgICAgICAgIGFzc2VydGlvbnM6IGFuYWx5c2VyKGJvZHkpXG4gICAgICAgIH07XG4gICAgICAgIHRlc3RzLnB1c2gob2JqKTtcbiAgICB9KVxuICAgIC5vbignZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGVtaXR0ZXIucmVwb3J0ID0gdGVzdHM7XG4gICAgICAgIGVtaXR0ZXIuZW1pdCgnZG9uZScsIHRlc3RzKVxuICAgIH0pXG4gICAgLm9uKCdzdWl0ZScsIGZ1bmN0aW9uKHMpIHtcbiAgICAgIGNvbnRleHQgKz0gKHMudGl0bGUgKyBzZXBhcmF0b3IpO1xuXG4gICAgfSlcbiAgICAub24oJ3N1aXRlIGVuZCcsIGZ1bmN0aW9uKHMpIHtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0LnNsaWNlKDAsIC0ocy50aXRsZS5sZW5ndGggKyBzZXBhcmF0b3IubGVuZ3RoKSlcbiAgICB9KVxuICB9IGNhdGNoKGUpIHtcbiAgICB0aHJvdyhlKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbWl0dGVyO1xuXG4vKlxuICogTW9jaGEucnVubmVyIEV2ZW50czpcbiAqIGNhbiBiZSB1c2VkIHRvIGJ1aWxkIGEgYmV0dGVyIGN1c3RvbSByZXBvcnRcbiAqXG4gKiAgIC0gYHN0YXJ0YCAgZXhlY3V0aW9uIHN0YXJ0ZWRcbiAqICAgLSBgZW5kYCAgZXhlY3V0aW9uIGNvbXBsZXRlXG4gKiAgIC0gYHN1aXRlYCAgKHN1aXRlKSB0ZXN0IHN1aXRlIGV4ZWN1dGlvbiBzdGFydGVkXG4gKiAgIC0gYHN1aXRlIGVuZGAgIChzdWl0ZSkgYWxsIHRlc3RzIChhbmQgc3ViLXN1aXRlcykgaGF2ZSBmaW5pc2hlZFxuICogICAtIGB0ZXN0YCAgKHRlc3QpIHRlc3QgZXhlY3V0aW9uIHN0YXJ0ZWRcbiAqICAgLSBgdGVzdCBlbmRgICAodGVzdCkgdGVzdCBjb21wbGV0ZWRcbiAqICAgLSBgaG9va2AgIChob29rKSBob29rIGV4ZWN1dGlvbiBzdGFydGVkXG4gKiAgIC0gYGhvb2sgZW5kYCAgKGhvb2spIGhvb2sgY29tcGxldGVcbiAqICAgLSBgcGFzc2AgICh0ZXN0KSB0ZXN0IHBhc3NlZFxuICogICAtIGBmYWlsYCAgKHRlc3QsIGVycikgdGVzdCBmYWlsZWRcbiAqICAgLSBgcGVuZGluZ2AgICh0ZXN0KSB0ZXN0IHBlbmRpbmdcbiAqLyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "test-runner.js"
      ],
      "names": [
        "analyser",
        "require",
        "EventEmitter",
        "Mocha",
        "fs",
        "path",
        "mocha",
        "timeout",
        "testDir",
        "readdirSync",
        "filter",
        "file",
        "substr",
        "forEach",
        "addFile",
        "join",
        "emitter",
        "run",
        "tests",
        "context",
        "separator",
        "runner",
        "ui",
        "on",
        "test",
        "body",
        "replace",
        "obj",
        "title",
        "slice",
        "length",
        "state",
        "assertions",
        "push",
        "report",
        "emit",
        "s",
        "e",
        "module",
        "exports"
      ],
      "mappings": "AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,YAAvC;;AAEA,MAAMC,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;AAAA,MACIG,EAAE,GAAGH,OAAO,CAAC,IAAD,CADhB;AAAA,MAEII,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAFlB;;AAGIA,OAAO,CAAC,iBAAD,CAAP;;AAEJ,MAAMK,KAAK,GAAG,IAAIH,KAAJ,CAAU;AAAEI,EAAAA,OAAO,EAAE;AAAX,CAAV,CAAd;AACA,MAAMC,OAAO,GAAG,SAAhB,C,CAGA;;AACAJ,EAAE,CAACK,WAAH,CAAeD,OAAf,EAAwBE,MAAxB,CAA+B,UAASC,IAAT,EAAc;AACzC;AACA,SAAOA,IAAI,CAACC,MAAL,CAAY,CAAC,CAAb,MAAoB,KAA3B;AAEH,CAJD,EAIGC,OAJH,CAIW,UAASF,IAAT,EAAc;AACrBL,EAAAA,KAAK,CAACQ,OAAN,CACIT,IAAI,CAACU,IAAL,CAAUP,OAAV,EAAmBG,IAAnB,CADJ;AAGH,CARD;AAUA,IAAIK,OAAO,GAAG,IAAId,YAAJ,EAAd;;AACAc,OAAO,CAACC,GAAR,GAAc,YAAW;AAEvB,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,SAAS,GAAG,MAAhB,CAJuB,CAKvB;;AACA,MAAI;AACJ,QAAIC,MAAM,GAAGf,KAAK,CAACgB,EAAN,CAAS,KAAT,EAAgBL,GAAhB,GACVM,EADU,CACP,UADO,EACK,UAASC,IAAT,EAAe;AAC3B;AACA,UAAIC,IAAI,GAAGD,IAAI,CAACC,IAAL,CAAUC,OAAV,CAAkB,sBAAlB,EAA0C,EAA1C,CAAX,CAF2B,CAG3B;;AACAD,MAAAA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,MAAb,EAAoB,GAApB,CAAP;AACA,UAAIC,GAAG,GAAG;AACRC,QAAAA,KAAK,EAAEJ,IAAI,CAACI,KADJ;AAERT,QAAAA,OAAO,EAAEA,OAAO,CAACU,KAAR,CAAc,CAAd,EAAiB,CAACT,SAAS,CAACU,MAA5B,CAFD;AAGRC,QAAAA,KAAK,EAAEP,IAAI,CAACO,KAHJ;AAIR;AACAC,QAAAA,UAAU,EAAEhC,QAAQ,CAACyB,IAAD;AALZ,OAAV;AAOAP,MAAAA,KAAK,CAACe,IAAN,CAAWN,GAAX;AACH,KAdU,EAeVJ,EAfU,CAeP,KAfO,EAeA,YAAW;AAClBP,MAAAA,OAAO,CAACkB,MAAR,GAAiBhB,KAAjB;AACAF,MAAAA,OAAO,CAACmB,IAAR,CAAa,MAAb,EAAqBjB,KAArB;AACH,KAlBU,EAmBVK,EAnBU,CAmBP,OAnBO,EAmBE,UAASa,CAAT,EAAY;AACvBjB,MAAAA,OAAO,IAAKiB,CAAC,CAACR,KAAF,GAAUR,SAAtB;AAED,KAtBU,EAuBVG,EAvBU,CAuBP,WAvBO,EAuBM,UAASa,CAAT,EAAY;AAC3BjB,MAAAA,OAAO,GAAGA,OAAO,CAACU,KAAR,CAAc,CAAd,EAAiB,EAAEO,CAAC,CAACR,KAAF,CAAQE,MAAR,GAAiBV,SAAS,CAACU,MAA7B,CAAjB,CAAV;AACD,KAzBU,CAAb;AA0BC,GA3BD,CA2BE,OAAMO,CAAN,EAAS;AACT,UAAMA,CAAN;AACD;AACF,CApCD;;AAsCAC,MAAM,CAACC,OAAP,GAAiBvB,OAAjB;AAEA",
      "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\",
      "sourcesContent": [
        "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\n\nconst analyser = require('./assertion-analyser');\nconst EventEmitter = require('events').EventEmitter;\n\nconst Mocha = require('mocha'),\n    fs = require('fs'),\n    path = require('path');\n    require(\"@babel/register\");\n\nconst mocha = new Mocha({ timeout: 5000 });\nconst testDir = './tests'\n\n\n// Add each .js file to the mocha instance\nfs.readdirSync(testDir).filter(function(file){\n    // Only keep the .js files\n    return file.substr(-3) === '.js';\n\n}).forEach(function(file){\n    mocha.addFile(\n        path.join(testDir, file)\n    );\n});\n\nlet emitter = new EventEmitter();\nemitter.run = function() {\n\n  let tests = [];\n  let context = \"\";\n  let separator = ' -> ';\n  // Run the tests.\n  try {\n  let runner = mocha.ui('tdd').run()\n    .on('test end', function(test) {\n        // remove comments\n        let body = test.body.replace(/\\/\\/.*\\n|\\/\\*.*\\*\\//g, '');\n        // collapse spaces\n        body = body.replace(/\\s+/g,' ');\n        let obj = {\n          title: test.title,\n          context: context.slice(0, -separator.length),\n          state: test.state,\n          // body: body,\n          assertions: analyser(body)\n        };\n        tests.push(obj);\n    })\n    .on('end', function() {\n        emitter.report = tests;\n        emitter.emit('done', tests)\n    })\n    .on('suite', function(s) {\n      context += (s.title + separator);\n\n    })\n    .on('suite end', function(s) {\n      context = context.slice(0, -(s.title.length + separator.length))\n    })\n  } catch(e) {\n    throw(e);\n  }\n};\n\nmodule.exports = emitter;\n\n/*\n * Mocha.runner Events:\n * can be used to build a better custom report\n *\n *   - `start`  execution started\n *   - `end`  execution complete\n *   - `suite`  (suite) test suite execution started\n *   - `suite end`  (suite) all tests (and sub-suites) have finished\n *   - `test`  (test) test execution started\n *   - `test end`  (test) test completed\n *   - `hook`  (hook) hook execution started\n *   - `hook end`  (hook) hook complete\n *   - `pass`  (test) test passed\n *   - `fail`  (test, err) test failed\n *   - `pending`  (test) test pending\n */"
      ]
    },
    "sourceType": "module",
    "mtime": 1761066612433
  },
  "{\"sourceRoot\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\",\"filename\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\\\\assertion-analyser.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\",\"plugins\":[],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver",
      "filename": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\assertion-analyser.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\assertion-analyser.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\assertion-analyser.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\",
        "sourceFileName": "assertion-analyser.js"
      }
    },
    "ast": null,
    "code": "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\nfunction objParser(str, init) {\n  // finds objects, arrays, strings, and function arguments\n  // between parens, because they may contain ','\n  let openSym = ['[', '{', '\"', \"'\", '('];\n  let closeSym = [']', '}', '\"', \"'\", ')'];\n  let type;\n  let i;\n\n  for (i = init || 0; i < str.length; i++) {\n    type = openSym.indexOf(str[i]);\n    if (type !== -1) break;\n  }\n\n  if (type === -1) return null;\n  let open = openSym[type];\n  let close = closeSym[type];\n  let count = 1;\n  let k;\n\n  for (k = i + 1; k < str.length; k++) {\n    if (open === '\"' || open === \"'\") {\n      if (str[k] === close) count--;\n      if (str[k] === '\\\\') k++;\n    } else {\n      if (str[k] === open) count++;\n      if (str[k] === close) count--;\n    }\n\n    if (count === 0) break;\n  }\n\n  if (count !== 0) return null;\n  let obj = str.slice(i, k + 1);\n  return {\n    start: i,\n    end: k,\n    obj: obj\n  };\n}\n\nfunction replacer(str) {\n  // replace objects with a symbol ( __#n)\n  let obj;\n  let cnt = 0;\n  let data = [];\n\n  while (obj = objParser(str)) {\n    data[cnt] = obj.obj;\n    str = str.substring(0, obj.start) + '__#' + cnt++ + str.substring(obj.end + 1);\n  }\n\n  return {\n    str: str,\n    dictionary: data\n  };\n}\n\nfunction splitter(str) {\n  // split on commas, then restore the objects\n  let strObj = replacer(str);\n  let args = strObj.str.split(',');\n  args = args.map(function (a) {\n    let m = a.match(/__#(\\d+)/);\n\n    while (m) {\n      a = a.replace(/__#(\\d+)/, strObj.dictionary[m[1]]);\n      m = a.match(/__#(\\d+)/);\n    }\n\n    return a.trim();\n  });\n  return args;\n}\n\nfunction assertionAnalyser(body) {\n  // already filtered in the test runner\n  // // remove comments\n  // body = body.replace(/\\/\\/.*\\n|\\/\\*.*\\*\\//g, '');\n  // // get test function body\n  // body = body.match(/\\{\\s*([\\s\\S]*)\\}\\s*$/)[1];\n  if (!body) return \"invalid assertion\"; // replace assertions bodies, so that they cannot\n  // contain the word 'assertion'\n\n  let cleanedBody = body.match(/(?:browser\\s*\\.\\s*)?assert\\s*\\.\\s*\\w*\\([\\s\\S]*\\)/);\n\n  if (cleanedBody && Array.isArray(cleanedBody)) {\n    body = cleanedBody[0];\n  } else {\n    // No assertions present\n    return [];\n  }\n\n  let s = replacer(body); // split on 'assertion'\n\n  let splittedAssertions = s.str.split('assert');\n  let assertions = splittedAssertions.slice(1); // match the METHODS\n\n  let assertionBodies = [];\n  let methods = assertions.map(function (a, i) {\n    let m = a.match(/^\\s*\\.\\s*(\\w+)__#(\\d+)/);\n    assertionBodies.push(parseInt(m[2]));\n    let pre = splittedAssertions[i].match(/browser\\s*\\.\\s*/) ? 'browser.' : '';\n    return pre + m[1];\n  });\n  if (methods.some(function (m) {\n    return !m;\n  })) return \"invalid assertion\"; // remove parens from the assertions bodies\n\n  let bodies = assertionBodies.map(function (b) {\n    return s.dictionary[b].slice(1, -1).trim();\n  });\n  assertions = methods.map(function (m, i) {\n    return {\n      method: m,\n      args: splitter(bodies[i]) //replace objects, split on ',' ,then restore objects\n\n    };\n  });\n  return assertions;\n}\n\nmodule.exports = assertionAnalyser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "assertion-analyser.js"
      ],
      "names": [
        "objParser",
        "str",
        "init",
        "openSym",
        "closeSym",
        "type",
        "i",
        "length",
        "indexOf",
        "open",
        "close",
        "count",
        "k",
        "obj",
        "slice",
        "start",
        "end",
        "replacer",
        "cnt",
        "data",
        "substring",
        "dictionary",
        "splitter",
        "strObj",
        "args",
        "split",
        "map",
        "a",
        "m",
        "match",
        "replace",
        "trim",
        "assertionAnalyser",
        "body",
        "cleanedBody",
        "Array",
        "isArray",
        "s",
        "splittedAssertions",
        "assertions",
        "assertionBodies",
        "methods",
        "push",
        "parseInt",
        "pre",
        "some",
        "bodies",
        "b",
        "method",
        "module",
        "exports"
      ],
      "mappings": "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",
      "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\",
      "sourcesContent": [
        "/*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*       DO NOT EDIT THIS FILE\n*       For FCC testing purposes!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\n\nfunction objParser(str, init) {\n  // finds objects, arrays, strings, and function arguments\n  // between parens, because they may contain ','\n  let openSym = ['[', '{', '\"', \"'\", '('];\n  let closeSym = [']', '}', '\"', \"'\", ')'];\n  let type;\n  let i;\n  for(i = (init || 0); i < str.length; i++ ) {\n    type = openSym.indexOf(str[i]);\n    if( type !== -1)  break;\n  }\n  if (type === -1) return null;\n  let open = openSym[type];\n  let close = closeSym[type];\n  let count = 1;\n  let k;\n  for(k = i+1; k < str.length; k++) {\n    if(open === '\"' || open === \"'\") {\n      if(str[k] === close) count--;\n      if(str[k] === '\\\\') k++;\n    } else {\n      if(str[k] === open) count++;\n      if(str[k] === close) count--;\n    }\n    if(count === 0) break;\n  }\n  if(count !== 0) return null;\n  let obj = str.slice(i, k+1);\n  return {\n    start : i,\n    end: k,\n    obj: obj\n  };\n}\n\nfunction replacer(str) {\n  // replace objects with a symbol ( __#n)\n  let obj;\n  let cnt = 0;\n  let data = [];\n  while(obj = objParser(str)) {\n    data[cnt] = obj.obj;\n    str = str.substring(0, obj.start) + '__#' + cnt++ + str.substring(obj.end+1)\n  }\n  return {\n    str : str,\n    dictionary : data\n  }\n}\n\nfunction splitter(str) {\n  // split on commas, then restore the objects\n  let strObj = replacer(str);\n  let args = strObj.str.split(',');\n  args = args.map(function(a){\n    let m = a.match(/__#(\\d+)/);\n    while (m) {\n      a = a.replace(/__#(\\d+)/, strObj.dictionary[m[1]]);\n      m = a.match(/__#(\\d+)/);\n    }\n    return a.trim();\n  })\n  return args;\n}\n\nfunction assertionAnalyser(body) {\n  \n  // already filtered in the test runner\n  // // remove comments\n  // body = body.replace(/\\/\\/.*\\n|\\/\\*.*\\*\\//g, '');\n  // // get test function body\n  // body = body.match(/\\{\\s*([\\s\\S]*)\\}\\s*$/)[1];\n  \n  if(!body) return \"invalid assertion\";\n  // replace assertions bodies, so that they cannot\n  // contain the word 'assertion'\n\n  let cleanedBody = body.match(/(?:browser\\s*\\.\\s*)?assert\\s*\\.\\s*\\w*\\([\\s\\S]*\\)/)\n  if(cleanedBody && Array.isArray(cleanedBody)) {\n    body = cleanedBody[0];\n  } else {\n    // No assertions present\n    return [];\n  }\n  let s = replacer(body);\n  // split on 'assertion'\n  let splittedAssertions = s.str.split('assert');\n  let assertions = splittedAssertions.slice(1);\n  // match the METHODS\n\n  let assertionBodies = [];\n  let methods = assertions.map(function(a, i){\n    let m = a.match(/^\\s*\\.\\s*(\\w+)__#(\\d+)/);\n    assertionBodies.push(parseInt(m[2]));\n    let pre = splittedAssertions[i].match(/browser\\s*\\.\\s*/) ? 'browser.' : '';\n    return pre + m[1];\n  });\n  if(methods.some(function(m){ return !m })) return \"invalid assertion\";\n  // remove parens from the assertions bodies\n  let bodies = assertionBodies.map(function(b){\n    return s.dictionary[b].slice(1,-1).trim();\n  });\n  assertions = methods.map(function(m, i) {\n    return {\n      method: m,\n      args: splitter(bodies[i]) //replace objects, split on ',' ,then restore objects\n    }\n  })\n  return assertions;\n}\n\nmodule.exports = assertionAnalyser;\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1761066612414
  },
  "{\"sourceRoot\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\\\\routes\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\",\"filename\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\\\\routes\\\\api.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"test\",\"root\":\"D:\\\\Kì7\\\\kt\\\\git\\\\Quality-Assurance-Projects-master\\\\Quality-Assurance-Projects-master\\\\Sodoku Solver\",\"plugins\":[],\"presets\":[]}:7.11.6:test": {
    "metadata": {},
    "options": {
      "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\routes\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver",
      "filename": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\routes\\api.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "test",
      "root": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\routes\\api.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\routes\\api.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\routes\\",
        "sourceFileName": "api.js"
      }
    },
    "ast": null,
    "code": "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  let solver = new SudokuSolver();\n  app.route('/api/check').post((req, res) => {\n    let {\n      value,\n      coordinate,\n      puzzle\n    } = req.body;\n    let alphaTest = /[a-i]/gi;\n    let numberTest = /^[1-9]$/g;\n    const regex = /^[1-9.]+$/;\n    if (!value || !coordinate || !puzzle) return res.json({\n      error: 'Required field(s) missing'\n    });\n    if (!regex.test(puzzle)) return res.json({\n      error: 'Invalid characters in puzzle'\n    });\n    if (puzzle.length !== 81) return res.json({\n      error: 'Expected puzzle to be 81 characters long'\n    });\n    const splitCoord = coordinate.split('');\n    if (splitCoord.length > 2 || splitCoord.length === 1 || !alphaTest.test(splitCoord[0]) || !numberTest.test(splitCoord[1])) return res.json({\n      error: 'Invalid coordinate'\n    });\n    if (!value.match(numberTest)) return res.json({\n      error: 'Invalid value'\n    });\n    let rowPlace = solver.checkRowPlacement(puzzle, splitCoord[0], splitCoord[1], value);\n    let colPlace = solver.checkColPlacement(puzzle, splitCoord[0], splitCoord[1], value);\n    let regionPlace = solver.checkRegionPlacement(puzzle, splitCoord[0], splitCoord[1], value);\n    let conflicts = [];\n    if (rowPlace && colPlace && regionPlace) return res.json({\n      valid: true\n    });else {\n      if (!rowPlace) conflicts.push('row');\n      if (!colPlace) conflicts.push('column');\n      if (!regionPlace) conflicts.push('region');\n      return res.json({\n        valid: false,\n        conflict: conflicts\n      });\n    }\n  });\n  app.route('/api/solve').post((req, res) => {\n    const {\n      puzzle\n    } = req.body;\n    const regex = /^[1-9.]+$/;\n    if (!puzzle) return res.json({\n      error: 'Required field missing'\n    });\n    if (!regex.test(puzzle)) return res.json({\n      error: 'Invalid characters in puzzle'\n    });\n    if (puzzle.length !== 81) return res.json({\n      error: 'Expected puzzle to be 81 characters long'\n    });\n    let solvedString = solver.solve(puzzle);\n    if (!solvedString) res.json({\n      error: 'Puzzle cannot be solved'\n    });else return res.json({\n      solution: solvedString\n    });\n  });\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS5qcyJdLCJuYW1lcyI6WyJTdWRva3VTb2x2ZXIiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwcCIsInNvbHZlciIsInJvdXRlIiwicG9zdCIsInJlcSIsInJlcyIsInZhbHVlIiwiY29vcmRpbmF0ZSIsInB1enpsZSIsImJvZHkiLCJhbHBoYVRlc3QiLCJudW1iZXJUZXN0IiwicmVnZXgiLCJqc29uIiwiZXJyb3IiLCJ0ZXN0IiwibGVuZ3RoIiwic3BsaXRDb29yZCIsInNwbGl0IiwibWF0Y2giLCJyb3dQbGFjZSIsImNoZWNrUm93UGxhY2VtZW50IiwiY29sUGxhY2UiLCJjaGVja0NvbFBsYWNlbWVudCIsInJlZ2lvblBsYWNlIiwiY2hlY2tSZWdpb25QbGFjZW1lbnQiLCJjb25mbGljdHMiLCJ2YWxpZCIsInB1c2giLCJjb25mbGljdCIsInNvbHZlZFN0cmluZyIsInNvbHZlIiwic29sdXRpb24iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLFlBQVksR0FBR0MsT0FBTyxDQUFDLGlDQUFELENBQTVCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsVUFBVUMsR0FBVixFQUFlO0FBRTlCLE1BQUlDLE1BQU0sR0FBRyxJQUFJTCxZQUFKLEVBQWI7QUFFQUksRUFBQUEsR0FBRyxDQUFDRSxLQUFKLENBQVUsWUFBVixFQUNHQyxJQURILENBQ1EsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDbEIsUUFBSTtBQUFDQyxNQUFBQSxLQUFEO0FBQVFDLE1BQUFBLFVBQVI7QUFBb0JDLE1BQUFBO0FBQXBCLFFBQThCSixHQUFHLENBQUNLLElBQXRDO0FBRUEsUUFBSUMsU0FBUyxHQUFHLFNBQWhCO0FBQ0EsUUFBSUMsVUFBVSxHQUFJLFVBQWxCO0FBQ0EsVUFBTUMsS0FBSyxHQUFHLFdBQWQ7QUFFQSxRQUFHLENBQUNOLEtBQUQsSUFBVSxDQUFDQyxVQUFYLElBQXlCLENBQUNDLE1BQTdCLEVBQXFDLE9BQU9ILEdBQUcsQ0FB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Q0YsS0FBSyxDQUFDRyxJQUFOLENBQVdQLE1BQVgsQ0FBSixFQUF3QixPQUFPSCxHQUFHLENBQUNRLElBQUosQ0FBUztBQUFDQyxNQUFBQSxLQUFLLEVBQUU7QUFBUixLQUFULENBQVA7QUFDeEIsUUFBR04sTUFBTSxDQUFDUSxNQUFQLEtBQWtCLEVBQXJCLEVBQXlCLE9BQU9YLEdBQUcsQ0FBQ1EsSUFBSixDQUFTO0FBQUNDLE1BQUFBLEtBQUssRUFBRTtBQUFSLEtBQVQsQ0FBUDtBQUV6QixRQUFJZ0IsWUFBWSxHQUFHN0IsTUFBTSxDQUFDOEIsS0FBUCxDQUFhdkIsTUFBYixDQUFuQjtBQUNBLFFBQUcsQ0FBQ3NCLFlBQUosRUFBa0J6QixHQUFHLENBQUNRLElBQUosQ0FBUztBQUFDQyxNQUFBQSxLQUFLLEVBQUU7QUFBUixLQUFULEVBQWxCLEtBQ0ssT0FBT1QsR0FBRyxDQUFDUSxJQUFKLENBQVM7QUFBQ21CLE1BQUFBLFFBQVEsRUFBRUY7QUFBWCxLQUFULENBQVA7QUFDTixHQVpIO0FBYUQsQ0EvQ0QiLCJzb3VyY2VSb290IjoiRDpcXEvDrDdcXGt0XFxnaXRcXFF1YWxpdHktQXNzdXJhbmNlLVByb2plY3RzLW1hc3RlclxcUXVhbGl0eS1Bc3N1cmFuY2UtUHJvamVjdHMtbWFzdGVyXFxTb2Rva3UgU29sdmVyXFxyb3V0ZXNcXCIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgU3Vkb2t1U29sdmVyID0gcmVxdWlyZSgnLi4vY29udHJvbGxlcnMvc3Vkb2t1LXNvbHZlci5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcHApIHtcbiAgXG4gIGxldCBzb2x2ZXIgPSBuZXcgU3Vkb2t1U29sdmVyKCk7XG5cbiAgYXBwLnJvdXRlKCcvYXBpL2NoZWNrJylcbiAgICAucG9zdCgocmVxLCByZXMpID0+IHtcbiAgICAgIGxldCB7dmFsdWUsIGNvb3JkaW5hdGUsIHB1enpsZX0gPSByZXEuYm9keVxuICAgICAgXG4gICAgICBsZXQgYWxwaGFUZXN0ID0gL1thLWldL2dpXG4gICAgICBsZXQgbnVtYmVyVGVzdCA9ICAvXlsxLTldJC9nXG4gICAgICBjb25zdCByZWdleCA9IC9eWzEtOS5dKyQvIFxuICAgICAgXG4gICAgICBpZighdmFsdWUgfHwgIWNvb3JkaW5hdGUgfHwgIXB1enpsZSkgcmV0dXJuIHJlcy5qc29uKHtlcnJvcjogJ1JlcXVpcmVkIGZpZWxkKHMpIG1pc3NpbmcnfSlcbiAgICAgIGlmKCFyZWdleC50ZXN0KHB1enpsZSkpIHJldHVybiByZXMuanNvbih7ZXJyb3I6ICdJbnZhbGlkIGNoYXJhY3RlcnMgaW4gcHV6emxlJ30pXG4gICAgICBpZihwdXp6bGUubGVuZ3RoICE9PSA4MSkgcmV0dXJuIHJlcy5qc29uKHtlcnJvcjogJ0V4cGVjdGVkIHB1enpsZSB0byBiZSA4MSBjaGFyYWN0ZXJzIGxvbmcnfSlcbiAgICAgIFxuICAgICAgY29uc3Qgc3BsaXRDb29yZCA9IGNvb3JkaW5hdGUuc3BsaXQoJycpXG4gICAgICBpZihzcGxpdENvb3JkLmxlbmd0aCA+IDIgfHwgc3BsaXRDb29yZC5sZW5ndGggPT09IDEgfHwgIWFscGhhVGVzdC50ZXN0KHNwbGl0Q29vcmRbMF0pIHx8ICFudW1iZXJUZXN0LnRlc3Qoc3BsaXRDb29yZFsxXSkpIHJldHVybiByZXMuanNvbih7ZXJyb3I6ICdJbnZhbGlkIGNvb3JkaW5hdGUnfSlcbiAgICAgIGlmKCF2YWx1ZS5tYXRjaChudW1iZXJUZXN0KSkgcmV0dXJuIHJlcy5qc29uKHtlcnJvcjogJ0ludmFsaWQgdmFsdWUnfSlcblxuICAgICAgbGV0IHJvd1BsYWNlID0gc29sdmVyLmNoZWNrUm93UGxhY2VtZW50KHB1enpsZSwgc3BsaXRDb29yZFswXSwgc3BsaXRDb29yZFsxXSx2YWx1ZSlcbiAgICAgIGxldCBjb2xQbGFjZSA9IHNvbHZlci5jaGVja0NvbFBsYWNlbWVudChwdXp6bGUsIHNwbGl0Q29vcmRbMF0sIHNwbGl0Q29vcmRbMV0sdmFsdWUpXG4gICAgICBsZXQgcmVnaW9uUGxhY2UgPSBzb2x2ZXIuY2hlY2tSZWdpb25QbGFjZW1lbnQocHV6emxlLCBzcGxpdENvb3JkWzBdLCBzcGxpdENvb3JkWzFdLHZhbHVlKVxuICAgICAgbGV0IGNvbmZsaWN0cyA9IFtdXG5cbiAgICAgIGlmKHJvd1BsYWNlICYmIGNvbFBsYWNlICYmIHJlZ2lvblBsYWNlKSByZXR1cm4gcmVzLmpzb24oe3ZhbGlkOiB0cnVlfSlcbiAgICAgIGVsc2V7XG4gICAgICAgIGlmKCFyb3dQbGFjZSkgY29uZmxpY3RzLnB1c2goJ3JvdycpXG4gICAgICAgIGlmKCFjb2xQbGFjZSkgY29uZmxpY3RzLnB1c2goJ2NvbHVtbicpXG4gICAgICAgIGlmKCFyZWdpb25QbGFjZSkgY29uZmxpY3RzLnB1c2goJ3JlZ2lvbicpXG4gICAgICAgIHJldHVybiByZXMuanNvbih7dmFsaWQ6IGZhbHNlLCBjb25mbGljdDogY29uZmxpY3RzfSlcbiAgICAgIH1cbiAgICB9KTtcbiAgICBcbiAgYXBwLnJvdXRlKCcvYXBpL3NvbHZlJylcbiAgICAucG9zdCgocmVxLCByZXMpID0+IHtcbiAgICAgIGNvbnN0IHtwdXp6bGV9ID0gcmVxLmJvZHlcbiAgICAgIGNvbnN0IHJlZ2V4ID0gL15bMS05Ll0rJC8gXG5cbiAgICAgIGlmKCFwdXp6bGUpIHJldHVybiByZXMuanNvbih7ZXJyb3I6ICdSZXF1aXJlZCBmaWVsZCBtaXNzaW5nJ30pXG4gICAgICBpZighcmVnZXgudGVzdChwdXp6bGUpKSByZXR1cm4gcmVzLmpzb24oe2Vycm9yOiAnSW52YWxpZCBjaGFyYWN0ZXJzIGluIHB1enpsZSd9KVxuICAgICAgaWYocHV6emxlLmxlbmd0aCAhPT0gODEpIHJldHVybiByZXMuanNvbih7ZXJyb3I6ICdFeHBlY3RlZCBwdXp6bGUgdG8gYmUgODEgY2hhcmFjdGVycyBsb25nJ30pXG4gICAgICBcbiAgICAgIGxldCBzb2x2ZWRTdHJpbmcgPSBzb2x2ZXIuc29sdmUocHV6emxlKVxuICAgICAgaWYoIXNvbHZlZFN0cmluZykgcmVzLmpzb24oe2Vycm9yOiAnUHV6emxlIGNhbm5vdCBiZSBzb2x2ZWQnfSlcbiAgICAgIGVsc2UgcmV0dXJuIHJlcy5qc29uKHtzb2x1dGlvbjogc29sdmVkU3RyaW5nfSlcbiAgICB9KTtcbn07XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "api.js"
      ],
      "names": [
        "SudokuSolver",
        "require",
        "module",
        "exports",
        "app",
        "solver",
        "route",
        "post",
        "req",
        "res",
        "value",
        "coordinate",
        "puzzle",
        "body",
        "alphaTest",
        "numberTest",
        "regex",
        "json",
        "error",
        "test",
        "length",
        "splitCoord",
        "split",
        "match",
        "rowPlace",
        "checkRowPlacement",
        "colPlace",
        "checkColPlacement",
        "regionPlace",
        "checkRegionPlacement",
        "conflicts",
        "valid",
        "push",
        "conflict",
        "solvedString",
        "solve",
        "solution"
      ],
      "mappings": "AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,iCAAD,CAA5B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAE9B,MAAIC,MAAM,GAAG,IAAIL,YAAJ,EAAb;AAEAI,EAAAA,GAAG,CAACE,KAAJ,CAAU,YAAV,EACGC,IADH,CACQ,CAACC,GAAD,EAAMC,GAAN,KAAc;AAClB,QAAI;AAACC,MAAAA,KAAD;AAAQC,MAAAA,UAAR;AAAoBC,MAAAA;AAApB,QAA8BJ,GAAG,CAACK,IAAtC;AAEA,QAAIC,SAAS,GAAG,SAAhB;AACA,QAAIC,UAAU,GAAI,UAAlB;AACA,UAAMC,KAAK,GAAG,WAAd;AAEA,QAAG,CAACN,KAAD,IAAU,CAACC,UAAX,IAAyB,CAACC,MAA7B,EAAqC,OAAOH,GAAG,CAACQ,IAAJ,CAAS;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAT,CAAP;AACrC,QAAG,CAACF,KAAK,CAACG,IAAN,CAAWP,MAAX,CAAJ,EAAwB,OAAOH,GAAG,CAACQ,IAAJ,CAAS;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAT,CAAP;AACxB,QAAGN,MAAM,CAACQ,MAAP,KAAkB,EAArB,EAAyB,OAAOX,GAAG,CAACQ,IAAJ,CAAS;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAT,CAAP;AAEzB,UAAMG,UAAU,GAAGV,UAAU,CAACW,KAAX,CAAiB,EAAjB,CAAnB;AACA,QAAGD,UAAU,CAACD,MAAX,GAAoB,CAApB,IAAyBC,UAAU,CAACD,MAAX,KAAsB,CAA/C,IAAoD,CAACN,SAAS,CAACK,IAAV,CAAeE,UAAU,CAAC,CAAD,CAAzB,CAArD,IAAsF,CAACN,UAAU,CAACI,IAAX,CAAgBE,UAAU,CAAC,CAAD,CAA1B,CAA1F,EAA0H,OAAOZ,GAAG,CAACQ,IAAJ,CAAS;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAT,CAAP;AAC1H,QAAG,CAACR,KAAK,CAACa,KAAN,CAAYR,UAAZ,CAAJ,EAA6B,OAAON,GAAG,CAACQ,IAAJ,CAAS;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAT,CAAP;AAE7B,QAAIM,QAAQ,GAAGnB,MAAM,CAACoB,iBAAP,CAAyBb,MAAzB,EAAiCS,UAAU,CAAC,CAAD,CAA3C,EAAgDA,UAAU,CAAC,CAAD,CAA1D,EAA8DX,KAA9D,CAAf;AACA,QAAIgB,QAAQ,GAAGrB,MAAM,CAACsB,iBAAP,CAAyBf,MAAzB,EAAiCS,UAAU,CAAC,CAAD,CAA3C,EAAgDA,UAAU,CAAC,CAAD,CAA1D,EAA8DX,KAA9D,CAAf;AACA,QAAIkB,WAAW,GAAGvB,MAAM,CAACwB,oBAAP,CAA4BjB,MAA5B,EAAoCS,UAAU,CAAC,CAAD,CAA9C,EAAmDA,UAAU,CAAC,CAAD,CAA7D,EAAiEX,KAAjE,CAAlB;AACA,QAAIoB,SAAS,GAAG,EAAhB;AAEA,QAAGN,QAAQ,IAAIE,QAAZ,IAAwBE,WAA3B,EAAwC,OAAOnB,GAAG,CAACQ,IAAJ,CAAS;AAACc,MAAAA,KAAK,EAAE;AAAR,KAAT,CAAP,CAAxC,KACI;AACF,UAAG,CAACP,QAAJ,EAAcM,SAAS,CAACE,IAAV,CAAe,KAAf;AACd,UAAG,CAACN,QAAJ,EAAcI,SAAS,CAACE,IAAV,CAAe,QAAf;AACd,UAAG,CAACJ,WAAJ,EAAiBE,SAAS,CAACE,IAAV,CAAe,QAAf;AACjB,aAAOvB,GAAG,CAACQ,IAAJ,CAAS;AAACc,QAAAA,KAAK,EAAE,KAAR;AAAeE,QAAAA,QAAQ,EAAEH;AAAzB,OAAT,CAAP;AACD;AACF,GA5BH;AA8BA1B,EAAAA,GAAG,CAACE,KAAJ,CAAU,YAAV,EACGC,IADH,CACQ,CAACC,GAAD,EAAMC,GAAN,KAAc;AAClB,UAAM;AAACG,MAAAA;AAAD,QAAWJ,GAAG,CAACK,IAArB;AACA,UAAMG,KAAK,GAAG,WAAd;AAEA,QAAG,CAACJ,MAAJ,EAAY,OAAOH,GAAG,CAACQ,IAAJ,CAAS;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAT,CAAP;AACZ,QAAG,CAACF,KAAK,CAACG,IAAN,CAAWP,MAAX,CAAJ,EAAwB,OAAOH,GAAG,CAACQ,IAAJ,CAAS;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAT,CAAP;AACxB,QAAGN,MAAM,CAACQ,MAAP,KAAkB,EAArB,EAAyB,OAAOX,GAAG,CAACQ,IAAJ,CAAS;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAT,CAAP;AAEzB,QAAIgB,YAAY,GAAG7B,MAAM,CAAC8B,KAAP,CAAavB,MAAb,CAAnB;AACA,QAAG,CAACsB,YAAJ,EAAkBzB,GAAG,CAACQ,IAAJ,CAAS;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAT,EAAlB,KACK,OAAOT,GAAG,CAACQ,IAAJ,CAAS;AAACmB,MAAAA,QAAQ,EAAEF;AAAX,KAAT,CAAP;AACN,GAZH;AAaD,CA/CD",
      "sourceRoot": "D:\\Kì7\\kt\\git\\Quality-Assurance-Projects-master\\Quality-Assurance-Projects-master\\Sodoku Solver\\routes\\",
      "sourcesContent": [
        "'use strict';\n\nconst SudokuSolver = require('../controllers/sudoku-solver.js');\n\nmodule.exports = function (app) {\n  \n  let solver = new SudokuSolver();\n\n  app.route('/api/check')\n    .post((req, res) => {\n      let {value, coordinate, puzzle} = req.body\n      \n      let alphaTest = /[a-i]/gi\n      let numberTest =  /^[1-9]$/g\n      const regex = /^[1-9.]+$/ \n      \n      if(!value || !coordinate || !puzzle) return res.json({error: 'Required field(s) missing'})\n      if(!regex.test(puzzle)) return res.json({error: 'Invalid characters in puzzle'})\n      if(puzzle.length !== 81) return res.json({error: 'Expected puzzle to be 81 characters long'})\n      \n      const splitCoord = coordinate.split('')\n      if(splitCoord.length > 2 || splitCoord.length === 1 || !alphaTest.test(splitCoord[0]) || !numberTest.test(splitCoord[1])) return res.json({error: 'Invalid coordinate'})\n      if(!value.match(numberTest)) return res.json({error: 'Invalid value'})\n\n      let rowPlace = solver.checkRowPlacement(puzzle, splitCoord[0], splitCoord[1],value)\n      let colPlace = solver.checkColPlacement(puzzle, splitCoord[0], splitCoord[1],value)\n      let regionPlace = solver.checkRegionPlacement(puzzle, splitCoord[0], splitCoord[1],value)\n      let conflicts = []\n\n      if(rowPlace && colPlace && regionPlace) return res.json({valid: true})\n      else{\n        if(!rowPlace) conflicts.push('row')\n        if(!colPlace) conflicts.push('column')\n        if(!regionPlace) conflicts.push('region')\n        return res.json({valid: false, conflict: conflicts})\n      }\n    });\n    \n  app.route('/api/solve')\n    .post((req, res) => {\n      const {puzzle} = req.body\n      const regex = /^[1-9.]+$/ \n\n      if(!puzzle) return res.json({error: 'Required field missing'})\n      if(!regex.test(puzzle)) return res.json({error: 'Invalid characters in puzzle'})\n      if(puzzle.length !== 81) return res.json({error: 'Expected puzzle to be 81 characters long'})\n      \n      let solvedString = solver.solve(puzzle)\n      if(!solvedString) res.json({error: 'Puzzle cannot be solved'})\n      else return res.json({solution: solvedString})\n    });\n};\n"
      ]
    },
    "sourceType": "module",
    "mtime": 1761066612462
  }
}